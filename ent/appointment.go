// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"skillsdemo/ent/appointment"
	"skillsdemo/ent/patient"
	"skillsdemo/ent/provider"
	"skillsdemo/ent/schema"
	"skillsdemo/ent/survey"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Appointment is the model entity for the Appointment schema.
type Appointment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Period holds the value of the "period" field.
	Period schema.Period `json:"period,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppointmentQuery when eager-loading is set.
	Edges                 AppointmentEdges `json:"edges"`
	patient_appointments  *uuid.UUID
	provider_appointments *uuid.UUID
	survey_appointments   *uuid.UUID
	selectValues          sql.SelectValues
}

// AppointmentEdges holds the relations/edges for other nodes in the graph.
type AppointmentEdges struct {
	// Patient holds the value of the patient edge.
	Patient *Patient `json:"patient,omitempty"`
	// Provider holds the value of the provider edge.
	Provider *Provider `json:"provider,omitempty"`
	// Diagnoses holds the value of the diagnoses edge.
	Diagnoses []*Diagnosis `json:"diagnoses,omitempty"`
	// Survey holds the value of the survey edge.
	Survey *Survey `json:"survey,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppointmentEdges) PatientOrErr() (*Patient, error) {
	if e.Patient != nil {
		return e.Patient, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: patient.Label}
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// ProviderOrErr returns the Provider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppointmentEdges) ProviderOrErr() (*Provider, error) {
	if e.Provider != nil {
		return e.Provider, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: provider.Label}
	}
	return nil, &NotLoadedError{edge: "provider"}
}

// DiagnosesOrErr returns the Diagnoses value or an error if the edge
// was not loaded in eager-loading.
func (e AppointmentEdges) DiagnosesOrErr() ([]*Diagnosis, error) {
	if e.loadedTypes[2] {
		return e.Diagnoses, nil
	}
	return nil, &NotLoadedError{edge: "diagnoses"}
}

// SurveyOrErr returns the Survey value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppointmentEdges) SurveyOrErr() (*Survey, error) {
	if e.Survey != nil {
		return e.Survey, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: survey.Label}
	}
	return nil, &NotLoadedError{edge: "survey"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Appointment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appointment.FieldPeriod:
			values[i] = new([]byte)
		case appointment.FieldStatus:
			values[i] = new(sql.NullString)
		case appointment.FieldID:
			values[i] = new(uuid.UUID)
		case appointment.ForeignKeys[0]: // patient_appointments
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case appointment.ForeignKeys[1]: // provider_appointments
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case appointment.ForeignKeys[2]: // survey_appointments
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Appointment fields.
func (a *Appointment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appointment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case appointment.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = value.String
			}
		case appointment.FieldPeriod:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field period", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Period); err != nil {
					return fmt.Errorf("unmarshal field period: %w", err)
				}
			}
		case appointment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field patient_appointments", values[i])
			} else if value.Valid {
				a.patient_appointments = new(uuid.UUID)
				*a.patient_appointments = *value.S.(*uuid.UUID)
			}
		case appointment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provider_appointments", values[i])
			} else if value.Valid {
				a.provider_appointments = new(uuid.UUID)
				*a.provider_appointments = *value.S.(*uuid.UUID)
			}
		case appointment.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field survey_appointments", values[i])
			} else if value.Valid {
				a.survey_appointments = new(uuid.UUID)
				*a.survey_appointments = *value.S.(*uuid.UUID)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Appointment.
// This includes values selected through modifiers, order, etc.
func (a *Appointment) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryPatient queries the "patient" edge of the Appointment entity.
func (a *Appointment) QueryPatient() *PatientQuery {
	return NewAppointmentClient(a.config).QueryPatient(a)
}

// QueryProvider queries the "provider" edge of the Appointment entity.
func (a *Appointment) QueryProvider() *ProviderQuery {
	return NewAppointmentClient(a.config).QueryProvider(a)
}

// QueryDiagnoses queries the "diagnoses" edge of the Appointment entity.
func (a *Appointment) QueryDiagnoses() *DiagnosisQuery {
	return NewAppointmentClient(a.config).QueryDiagnoses(a)
}

// QuerySurvey queries the "survey" edge of the Appointment entity.
func (a *Appointment) QuerySurvey() *SurveyQuery {
	return NewAppointmentClient(a.config).QuerySurvey(a)
}

// Update returns a builder for updating this Appointment.
// Note that you need to call Appointment.Unwrap() before calling this method if this Appointment
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Appointment) Update() *AppointmentUpdateOne {
	return NewAppointmentClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Appointment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Appointment) Unwrap() *Appointment {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Appointment is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Appointment) String() string {
	var builder strings.Builder
	builder.WriteString("Appointment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("status=")
	builder.WriteString(a.Status)
	builder.WriteString(", ")
	builder.WriteString("period=")
	builder.WriteString(fmt.Sprintf("%v", a.Period))
	builder.WriteByte(')')
	return builder.String()
}

// Appointments is a parsable slice of Appointment.
type Appointments []*Appointment
