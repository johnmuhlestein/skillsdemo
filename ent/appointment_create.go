// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"skillsdemo/ent/appointment"
	"skillsdemo/ent/diagnosis"
	"skillsdemo/ent/patient"
	"skillsdemo/ent/provider"
	"skillsdemo/ent/schema"
	"skillsdemo/ent/survey"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AppointmentCreate is the builder for creating a Appointment entity.
type AppointmentCreate struct {
	config
	mutation *AppointmentMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (ac *AppointmentCreate) SetStatus(s string) *AppointmentCreate {
	ac.mutation.SetStatus(s)
	return ac
}

// SetPeriod sets the "period" field.
func (ac *AppointmentCreate) SetPeriod(s schema.Period) *AppointmentCreate {
	ac.mutation.SetPeriod(s)
	return ac
}

// SetID sets the "id" field.
func (ac *AppointmentCreate) SetID(u uuid.UUID) *AppointmentCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AppointmentCreate) SetNillableID(u *uuid.UUID) *AppointmentCreate {
	if u != nil {
		ac.SetID(*u)
	}
	return ac
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (ac *AppointmentCreate) SetPatientID(id uuid.UUID) *AppointmentCreate {
	ac.mutation.SetPatientID(id)
	return ac
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (ac *AppointmentCreate) SetNillablePatientID(id *uuid.UUID) *AppointmentCreate {
	if id != nil {
		ac = ac.SetPatientID(*id)
	}
	return ac
}

// SetPatient sets the "patient" edge to the Patient entity.
func (ac *AppointmentCreate) SetPatient(p *Patient) *AppointmentCreate {
	return ac.SetPatientID(p.ID)
}

// SetProviderID sets the "provider" edge to the Provider entity by ID.
func (ac *AppointmentCreate) SetProviderID(id uuid.UUID) *AppointmentCreate {
	ac.mutation.SetProviderID(id)
	return ac
}

// SetNillableProviderID sets the "provider" edge to the Provider entity by ID if the given value is not nil.
func (ac *AppointmentCreate) SetNillableProviderID(id *uuid.UUID) *AppointmentCreate {
	if id != nil {
		ac = ac.SetProviderID(*id)
	}
	return ac
}

// SetProvider sets the "provider" edge to the Provider entity.
func (ac *AppointmentCreate) SetProvider(p *Provider) *AppointmentCreate {
	return ac.SetProviderID(p.ID)
}

// AddDiagnosisIDs adds the "diagnoses" edge to the Diagnosis entity by IDs.
func (ac *AppointmentCreate) AddDiagnosisIDs(ids ...uuid.UUID) *AppointmentCreate {
	ac.mutation.AddDiagnosisIDs(ids...)
	return ac
}

// AddDiagnoses adds the "diagnoses" edges to the Diagnosis entity.
func (ac *AppointmentCreate) AddDiagnoses(d ...*Diagnosis) *AppointmentCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ac.AddDiagnosisIDs(ids...)
}

// SetSurveyID sets the "survey" edge to the Survey entity by ID.
func (ac *AppointmentCreate) SetSurveyID(id uuid.UUID) *AppointmentCreate {
	ac.mutation.SetSurveyID(id)
	return ac
}

// SetNillableSurveyID sets the "survey" edge to the Survey entity by ID if the given value is not nil.
func (ac *AppointmentCreate) SetNillableSurveyID(id *uuid.UUID) *AppointmentCreate {
	if id != nil {
		ac = ac.SetSurveyID(*id)
	}
	return ac
}

// SetSurvey sets the "survey" edge to the Survey entity.
func (ac *AppointmentCreate) SetSurvey(s *Survey) *AppointmentCreate {
	return ac.SetSurveyID(s.ID)
}

// Mutation returns the AppointmentMutation object of the builder.
func (ac *AppointmentCreate) Mutation() *AppointmentMutation {
	return ac.mutation
}

// Save creates the Appointment in the database.
func (ac *AppointmentCreate) Save(ctx context.Context) (*Appointment, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AppointmentCreate) SaveX(ctx context.Context) *Appointment {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AppointmentCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AppointmentCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AppointmentCreate) defaults() {
	if _, ok := ac.mutation.ID(); !ok {
		v := appointment.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AppointmentCreate) check() error {
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Appointment.status"`)}
	}
	if _, ok := ac.mutation.Period(); !ok {
		return &ValidationError{Name: "period", err: errors.New(`ent: missing required field "Appointment.period"`)}
	}
	return nil
}

func (ac *AppointmentCreate) sqlSave(ctx context.Context) (*Appointment, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AppointmentCreate) createSpec() (*Appointment, *sqlgraph.CreateSpec) {
	var (
		_node = &Appointment{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(appointment.Table, sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.SetField(appointment.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ac.mutation.Period(); ok {
		_spec.SetField(appointment.FieldPeriod, field.TypeJSON, value)
		_node.Period = value
	}
	if nodes := ac.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.PatientTable,
			Columns: []string{appointment.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.patient_appointments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.ProviderTable,
			Columns: []string{appointment.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provider.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.provider_appointments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.DiagnosesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   appointment.DiagnosesTable,
			Columns: appointment.DiagnosesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(diagnosis.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.SurveyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.SurveyTable,
			Columns: []string{appointment.SurveyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.survey_appointments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AppointmentCreateBulk is the builder for creating many Appointment entities in bulk.
type AppointmentCreateBulk struct {
	config
	err      error
	builders []*AppointmentCreate
}

// Save creates the Appointment entities in the database.
func (acb *AppointmentCreateBulk) Save(ctx context.Context) ([]*Appointment, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Appointment, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppointmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AppointmentCreateBulk) SaveX(ctx context.Context) []*Appointment {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AppointmentCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AppointmentCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
