// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"skillsdemo/ent/appointment"
	"skillsdemo/ent/diagnosis"
	"skillsdemo/ent/patient"
	"skillsdemo/ent/predicate"
	"skillsdemo/ent/provider"
	"skillsdemo/ent/schema"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AppointmentUpdate is the builder for updating Appointment entities.
type AppointmentUpdate struct {
	config
	hooks    []Hook
	mutation *AppointmentMutation
}

// Where appends a list predicates to the AppointmentUpdate builder.
func (au *AppointmentUpdate) Where(ps ...predicate.Appointment) *AppointmentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetStatus sets the "status" field.
func (au *AppointmentUpdate) SetStatus(s string) *AppointmentUpdate {
	au.mutation.SetStatus(s)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AppointmentUpdate) SetNillableStatus(s *string) *AppointmentUpdate {
	if s != nil {
		au.SetStatus(*s)
	}
	return au
}

// SetPeriod sets the "period" field.
func (au *AppointmentUpdate) SetPeriod(s schema.Period) *AppointmentUpdate {
	au.mutation.SetPeriod(s)
	return au
}

// SetNillablePeriod sets the "period" field if the given value is not nil.
func (au *AppointmentUpdate) SetNillablePeriod(s *schema.Period) *AppointmentUpdate {
	if s != nil {
		au.SetPeriod(*s)
	}
	return au
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (au *AppointmentUpdate) SetPatientID(id uuid.UUID) *AppointmentUpdate {
	au.mutation.SetPatientID(id)
	return au
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (au *AppointmentUpdate) SetNillablePatientID(id *uuid.UUID) *AppointmentUpdate {
	if id != nil {
		au = au.SetPatientID(*id)
	}
	return au
}

// SetPatient sets the "patient" edge to the Patient entity.
func (au *AppointmentUpdate) SetPatient(p *Patient) *AppointmentUpdate {
	return au.SetPatientID(p.ID)
}

// SetProviderID sets the "provider" edge to the Provider entity by ID.
func (au *AppointmentUpdate) SetProviderID(id uuid.UUID) *AppointmentUpdate {
	au.mutation.SetProviderID(id)
	return au
}

// SetNillableProviderID sets the "provider" edge to the Provider entity by ID if the given value is not nil.
func (au *AppointmentUpdate) SetNillableProviderID(id *uuid.UUID) *AppointmentUpdate {
	if id != nil {
		au = au.SetProviderID(*id)
	}
	return au
}

// SetProvider sets the "provider" edge to the Provider entity.
func (au *AppointmentUpdate) SetProvider(p *Provider) *AppointmentUpdate {
	return au.SetProviderID(p.ID)
}

// AddDiagnosisIDs adds the "diagnoses" edge to the Diagnosis entity by IDs.
func (au *AppointmentUpdate) AddDiagnosisIDs(ids ...uuid.UUID) *AppointmentUpdate {
	au.mutation.AddDiagnosisIDs(ids...)
	return au
}

// AddDiagnoses adds the "diagnoses" edges to the Diagnosis entity.
func (au *AppointmentUpdate) AddDiagnoses(d ...*Diagnosis) *AppointmentUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.AddDiagnosisIDs(ids...)
}

// Mutation returns the AppointmentMutation object of the builder.
func (au *AppointmentUpdate) Mutation() *AppointmentMutation {
	return au.mutation
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (au *AppointmentUpdate) ClearPatient() *AppointmentUpdate {
	au.mutation.ClearPatient()
	return au
}

// ClearProvider clears the "provider" edge to the Provider entity.
func (au *AppointmentUpdate) ClearProvider() *AppointmentUpdate {
	au.mutation.ClearProvider()
	return au
}

// ClearDiagnoses clears all "diagnoses" edges to the Diagnosis entity.
func (au *AppointmentUpdate) ClearDiagnoses() *AppointmentUpdate {
	au.mutation.ClearDiagnoses()
	return au
}

// RemoveDiagnosisIDs removes the "diagnoses" edge to Diagnosis entities by IDs.
func (au *AppointmentUpdate) RemoveDiagnosisIDs(ids ...uuid.UUID) *AppointmentUpdate {
	au.mutation.RemoveDiagnosisIDs(ids...)
	return au
}

// RemoveDiagnoses removes "diagnoses" edges to Diagnosis entities.
func (au *AppointmentUpdate) RemoveDiagnoses(d ...*Diagnosis) *AppointmentUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.RemoveDiagnosisIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AppointmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AppointmentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AppointmentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AppointmentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AppointmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appointment.Table, appointment.Columns, sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(appointment.FieldStatus, field.TypeString, value)
	}
	if value, ok := au.mutation.Period(); ok {
		_spec.SetField(appointment.FieldPeriod, field.TypeJSON, value)
	}
	if au.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.PatientTable,
			Columns: []string{appointment.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.PatientTable,
			Columns: []string{appointment.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.ProviderTable,
			Columns: []string{appointment.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provider.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.ProviderTable,
			Columns: []string{appointment.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provider.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DiagnosesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   appointment.DiagnosesTable,
			Columns: appointment.DiagnosesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(diagnosis.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedDiagnosesIDs(); len(nodes) > 0 && !au.mutation.DiagnosesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   appointment.DiagnosesTable,
			Columns: appointment.DiagnosesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(diagnosis.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DiagnosesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   appointment.DiagnosesTable,
			Columns: appointment.DiagnosesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(diagnosis.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appointment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AppointmentUpdateOne is the builder for updating a single Appointment entity.
type AppointmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppointmentMutation
}

// SetStatus sets the "status" field.
func (auo *AppointmentUpdateOne) SetStatus(s string) *AppointmentUpdateOne {
	auo.mutation.SetStatus(s)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableStatus(s *string) *AppointmentUpdateOne {
	if s != nil {
		auo.SetStatus(*s)
	}
	return auo
}

// SetPeriod sets the "period" field.
func (auo *AppointmentUpdateOne) SetPeriod(s schema.Period) *AppointmentUpdateOne {
	auo.mutation.SetPeriod(s)
	return auo
}

// SetNillablePeriod sets the "period" field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillablePeriod(s *schema.Period) *AppointmentUpdateOne {
	if s != nil {
		auo.SetPeriod(*s)
	}
	return auo
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (auo *AppointmentUpdateOne) SetPatientID(id uuid.UUID) *AppointmentUpdateOne {
	auo.mutation.SetPatientID(id)
	return auo
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillablePatientID(id *uuid.UUID) *AppointmentUpdateOne {
	if id != nil {
		auo = auo.SetPatientID(*id)
	}
	return auo
}

// SetPatient sets the "patient" edge to the Patient entity.
func (auo *AppointmentUpdateOne) SetPatient(p *Patient) *AppointmentUpdateOne {
	return auo.SetPatientID(p.ID)
}

// SetProviderID sets the "provider" edge to the Provider entity by ID.
func (auo *AppointmentUpdateOne) SetProviderID(id uuid.UUID) *AppointmentUpdateOne {
	auo.mutation.SetProviderID(id)
	return auo
}

// SetNillableProviderID sets the "provider" edge to the Provider entity by ID if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableProviderID(id *uuid.UUID) *AppointmentUpdateOne {
	if id != nil {
		auo = auo.SetProviderID(*id)
	}
	return auo
}

// SetProvider sets the "provider" edge to the Provider entity.
func (auo *AppointmentUpdateOne) SetProvider(p *Provider) *AppointmentUpdateOne {
	return auo.SetProviderID(p.ID)
}

// AddDiagnosisIDs adds the "diagnoses" edge to the Diagnosis entity by IDs.
func (auo *AppointmentUpdateOne) AddDiagnosisIDs(ids ...uuid.UUID) *AppointmentUpdateOne {
	auo.mutation.AddDiagnosisIDs(ids...)
	return auo
}

// AddDiagnoses adds the "diagnoses" edges to the Diagnosis entity.
func (auo *AppointmentUpdateOne) AddDiagnoses(d ...*Diagnosis) *AppointmentUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.AddDiagnosisIDs(ids...)
}

// Mutation returns the AppointmentMutation object of the builder.
func (auo *AppointmentUpdateOne) Mutation() *AppointmentMutation {
	return auo.mutation
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (auo *AppointmentUpdateOne) ClearPatient() *AppointmentUpdateOne {
	auo.mutation.ClearPatient()
	return auo
}

// ClearProvider clears the "provider" edge to the Provider entity.
func (auo *AppointmentUpdateOne) ClearProvider() *AppointmentUpdateOne {
	auo.mutation.ClearProvider()
	return auo
}

// ClearDiagnoses clears all "diagnoses" edges to the Diagnosis entity.
func (auo *AppointmentUpdateOne) ClearDiagnoses() *AppointmentUpdateOne {
	auo.mutation.ClearDiagnoses()
	return auo
}

// RemoveDiagnosisIDs removes the "diagnoses" edge to Diagnosis entities by IDs.
func (auo *AppointmentUpdateOne) RemoveDiagnosisIDs(ids ...uuid.UUID) *AppointmentUpdateOne {
	auo.mutation.RemoveDiagnosisIDs(ids...)
	return auo
}

// RemoveDiagnoses removes "diagnoses" edges to Diagnosis entities.
func (auo *AppointmentUpdateOne) RemoveDiagnoses(d ...*Diagnosis) *AppointmentUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.RemoveDiagnosisIDs(ids...)
}

// Where appends a list predicates to the AppointmentUpdate builder.
func (auo *AppointmentUpdateOne) Where(ps ...predicate.Appointment) *AppointmentUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AppointmentUpdateOne) Select(field string, fields ...string) *AppointmentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Appointment entity.
func (auo *AppointmentUpdateOne) Save(ctx context.Context) (*Appointment, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AppointmentUpdateOne) SaveX(ctx context.Context) *Appointment {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AppointmentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AppointmentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AppointmentUpdateOne) sqlSave(ctx context.Context) (_node *Appointment, err error) {
	_spec := sqlgraph.NewUpdateSpec(appointment.Table, appointment.Columns, sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Appointment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appointment.FieldID)
		for _, f := range fields {
			if !appointment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appointment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(appointment.FieldStatus, field.TypeString, value)
	}
	if value, ok := auo.mutation.Period(); ok {
		_spec.SetField(appointment.FieldPeriod, field.TypeJSON, value)
	}
	if auo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.PatientTable,
			Columns: []string{appointment.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.PatientTable,
			Columns: []string{appointment.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.ProviderTable,
			Columns: []string{appointment.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provider.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.ProviderTable,
			Columns: []string{appointment.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provider.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DiagnosesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   appointment.DiagnosesTable,
			Columns: appointment.DiagnosesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(diagnosis.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedDiagnosesIDs(); len(nodes) > 0 && !auo.mutation.DiagnosesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   appointment.DiagnosesTable,
			Columns: appointment.DiagnosesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(diagnosis.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DiagnosesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   appointment.DiagnosesTable,
			Columns: appointment.DiagnosesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(diagnosis.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Appointment{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appointment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
