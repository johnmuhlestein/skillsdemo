// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"skillsdemo/ent/diagnosis"
	"skillsdemo/ent/schema"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Diagnosis is the model entity for the Diagnosis schema.
type Diagnosis struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// LastUpdated holds the value of the "last_updated" field.
	LastUpdated time.Time `json:"last_updated,omitempty"`
	// Code holds the value of the "code" field.
	Code schema.Code `json:"code,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DiagnosisQuery when eager-loading is set.
	Edges        DiagnosisEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DiagnosisEdges holds the relations/edges for other nodes in the graph.
type DiagnosisEdges struct {
	// Appointments holds the value of the appointments edge.
	Appointments []*Appointment `json:"appointments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AppointmentsOrErr returns the Appointments value or an error if the edge
// was not loaded in eager-loading.
func (e DiagnosisEdges) AppointmentsOrErr() ([]*Appointment, error) {
	if e.loadedTypes[0] {
		return e.Appointments, nil
	}
	return nil, &NotLoadedError{edge: "appointments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Diagnosis) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case diagnosis.FieldCode:
			values[i] = new([]byte)
		case diagnosis.FieldStatus:
			values[i] = new(sql.NullString)
		case diagnosis.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		case diagnosis.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Diagnosis fields.
func (d *Diagnosis) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case diagnosis.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case diagnosis.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				d.Status = value.String
			}
		case diagnosis.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_updated", values[i])
			} else if value.Valid {
				d.LastUpdated = value.Time
			}
		case diagnosis.FieldCode:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.Code); err != nil {
					return fmt.Errorf("unmarshal field code: %w", err)
				}
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Diagnosis.
// This includes values selected through modifiers, order, etc.
func (d *Diagnosis) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryAppointments queries the "appointments" edge of the Diagnosis entity.
func (d *Diagnosis) QueryAppointments() *AppointmentQuery {
	return NewDiagnosisClient(d.config).QueryAppointments(d)
}

// Update returns a builder for updating this Diagnosis.
// Note that you need to call Diagnosis.Unwrap() before calling this method if this Diagnosis
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Diagnosis) Update() *DiagnosisUpdateOne {
	return NewDiagnosisClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Diagnosis entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Diagnosis) Unwrap() *Diagnosis {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Diagnosis is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Diagnosis) String() string {
	var builder strings.Builder
	builder.WriteString("Diagnosis(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("status=")
	builder.WriteString(d.Status)
	builder.WriteString(", ")
	builder.WriteString("last_updated=")
	builder.WriteString(d.LastUpdated.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(fmt.Sprintf("%v", d.Code))
	builder.WriteByte(')')
	return builder.String()
}

// Diagnoses is a parsable slice of Diagnosis.
type Diagnoses []*Diagnosis
