// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"skillsdemo/ent/appointment"
	"skillsdemo/ent/diagnosis"
	"skillsdemo/ent/predicate"
	"skillsdemo/ent/schema"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DiagnosisUpdate is the builder for updating Diagnosis entities.
type DiagnosisUpdate struct {
	config
	hooks    []Hook
	mutation *DiagnosisMutation
}

// Where appends a list predicates to the DiagnosisUpdate builder.
func (du *DiagnosisUpdate) Where(ps ...predicate.Diagnosis) *DiagnosisUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetStatus sets the "status" field.
func (du *DiagnosisUpdate) SetStatus(s string) *DiagnosisUpdate {
	du.mutation.SetStatus(s)
	return du
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (du *DiagnosisUpdate) SetNillableStatus(s *string) *DiagnosisUpdate {
	if s != nil {
		du.SetStatus(*s)
	}
	return du
}

// SetLastUpdated sets the "lastUpdated" field.
func (du *DiagnosisUpdate) SetLastUpdated(t time.Time) *DiagnosisUpdate {
	du.mutation.SetLastUpdated(t)
	return du
}

// SetNillableLastUpdated sets the "lastUpdated" field if the given value is not nil.
func (du *DiagnosisUpdate) SetNillableLastUpdated(t *time.Time) *DiagnosisUpdate {
	if t != nil {
		du.SetLastUpdated(*t)
	}
	return du
}

// SetCode sets the "code" field.
func (du *DiagnosisUpdate) SetCode(s schema.Code) *DiagnosisUpdate {
	du.mutation.SetCode(s)
	return du
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (du *DiagnosisUpdate) SetNillableCode(s *schema.Code) *DiagnosisUpdate {
	if s != nil {
		du.SetCode(*s)
	}
	return du
}

// AddAppointmentIDs adds the "appointment" edge to the Appointment entity by IDs.
func (du *DiagnosisUpdate) AddAppointmentIDs(ids ...uuid.UUID) *DiagnosisUpdate {
	du.mutation.AddAppointmentIDs(ids...)
	return du
}

// AddAppointment adds the "appointment" edges to the Appointment entity.
func (du *DiagnosisUpdate) AddAppointment(a ...*Appointment) *DiagnosisUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return du.AddAppointmentIDs(ids...)
}

// Mutation returns the DiagnosisMutation object of the builder.
func (du *DiagnosisUpdate) Mutation() *DiagnosisMutation {
	return du.mutation
}

// ClearAppointment clears all "appointment" edges to the Appointment entity.
func (du *DiagnosisUpdate) ClearAppointment() *DiagnosisUpdate {
	du.mutation.ClearAppointment()
	return du
}

// RemoveAppointmentIDs removes the "appointment" edge to Appointment entities by IDs.
func (du *DiagnosisUpdate) RemoveAppointmentIDs(ids ...uuid.UUID) *DiagnosisUpdate {
	du.mutation.RemoveAppointmentIDs(ids...)
	return du
}

// RemoveAppointment removes "appointment" edges to Appointment entities.
func (du *DiagnosisUpdate) RemoveAppointment(a ...*Appointment) *DiagnosisUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return du.RemoveAppointmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DiagnosisUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DiagnosisUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DiagnosisUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DiagnosisUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DiagnosisUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(diagnosis.Table, diagnosis.Columns, sqlgraph.NewFieldSpec(diagnosis.FieldID, field.TypeUUID))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Status(); ok {
		_spec.SetField(diagnosis.FieldStatus, field.TypeString, value)
	}
	if value, ok := du.mutation.LastUpdated(); ok {
		_spec.SetField(diagnosis.FieldLastUpdated, field.TypeTime, value)
	}
	if value, ok := du.mutation.Code(); ok {
		_spec.SetField(diagnosis.FieldCode, field.TypeJSON, value)
	}
	if du.mutation.AppointmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   diagnosis.AppointmentTable,
			Columns: diagnosis.AppointmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedAppointmentIDs(); len(nodes) > 0 && !du.mutation.AppointmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   diagnosis.AppointmentTable,
			Columns: diagnosis.AppointmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.AppointmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   diagnosis.AppointmentTable,
			Columns: diagnosis.AppointmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{diagnosis.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DiagnosisUpdateOne is the builder for updating a single Diagnosis entity.
type DiagnosisUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DiagnosisMutation
}

// SetStatus sets the "status" field.
func (duo *DiagnosisUpdateOne) SetStatus(s string) *DiagnosisUpdateOne {
	duo.mutation.SetStatus(s)
	return duo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (duo *DiagnosisUpdateOne) SetNillableStatus(s *string) *DiagnosisUpdateOne {
	if s != nil {
		duo.SetStatus(*s)
	}
	return duo
}

// SetLastUpdated sets the "lastUpdated" field.
func (duo *DiagnosisUpdateOne) SetLastUpdated(t time.Time) *DiagnosisUpdateOne {
	duo.mutation.SetLastUpdated(t)
	return duo
}

// SetNillableLastUpdated sets the "lastUpdated" field if the given value is not nil.
func (duo *DiagnosisUpdateOne) SetNillableLastUpdated(t *time.Time) *DiagnosisUpdateOne {
	if t != nil {
		duo.SetLastUpdated(*t)
	}
	return duo
}

// SetCode sets the "code" field.
func (duo *DiagnosisUpdateOne) SetCode(s schema.Code) *DiagnosisUpdateOne {
	duo.mutation.SetCode(s)
	return duo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (duo *DiagnosisUpdateOne) SetNillableCode(s *schema.Code) *DiagnosisUpdateOne {
	if s != nil {
		duo.SetCode(*s)
	}
	return duo
}

// AddAppointmentIDs adds the "appointment" edge to the Appointment entity by IDs.
func (duo *DiagnosisUpdateOne) AddAppointmentIDs(ids ...uuid.UUID) *DiagnosisUpdateOne {
	duo.mutation.AddAppointmentIDs(ids...)
	return duo
}

// AddAppointment adds the "appointment" edges to the Appointment entity.
func (duo *DiagnosisUpdateOne) AddAppointment(a ...*Appointment) *DiagnosisUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return duo.AddAppointmentIDs(ids...)
}

// Mutation returns the DiagnosisMutation object of the builder.
func (duo *DiagnosisUpdateOne) Mutation() *DiagnosisMutation {
	return duo.mutation
}

// ClearAppointment clears all "appointment" edges to the Appointment entity.
func (duo *DiagnosisUpdateOne) ClearAppointment() *DiagnosisUpdateOne {
	duo.mutation.ClearAppointment()
	return duo
}

// RemoveAppointmentIDs removes the "appointment" edge to Appointment entities by IDs.
func (duo *DiagnosisUpdateOne) RemoveAppointmentIDs(ids ...uuid.UUID) *DiagnosisUpdateOne {
	duo.mutation.RemoveAppointmentIDs(ids...)
	return duo
}

// RemoveAppointment removes "appointment" edges to Appointment entities.
func (duo *DiagnosisUpdateOne) RemoveAppointment(a ...*Appointment) *DiagnosisUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return duo.RemoveAppointmentIDs(ids...)
}

// Where appends a list predicates to the DiagnosisUpdate builder.
func (duo *DiagnosisUpdateOne) Where(ps ...predicate.Diagnosis) *DiagnosisUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DiagnosisUpdateOne) Select(field string, fields ...string) *DiagnosisUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Diagnosis entity.
func (duo *DiagnosisUpdateOne) Save(ctx context.Context) (*Diagnosis, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DiagnosisUpdateOne) SaveX(ctx context.Context) *Diagnosis {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DiagnosisUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DiagnosisUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DiagnosisUpdateOne) sqlSave(ctx context.Context) (_node *Diagnosis, err error) {
	_spec := sqlgraph.NewUpdateSpec(diagnosis.Table, diagnosis.Columns, sqlgraph.NewFieldSpec(diagnosis.FieldID, field.TypeUUID))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Diagnosis.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, diagnosis.FieldID)
		for _, f := range fields {
			if !diagnosis.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != diagnosis.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Status(); ok {
		_spec.SetField(diagnosis.FieldStatus, field.TypeString, value)
	}
	if value, ok := duo.mutation.LastUpdated(); ok {
		_spec.SetField(diagnosis.FieldLastUpdated, field.TypeTime, value)
	}
	if value, ok := duo.mutation.Code(); ok {
		_spec.SetField(diagnosis.FieldCode, field.TypeJSON, value)
	}
	if duo.mutation.AppointmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   diagnosis.AppointmentTable,
			Columns: diagnosis.AppointmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedAppointmentIDs(); len(nodes) > 0 && !duo.mutation.AppointmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   diagnosis.AppointmentTable,
			Columns: diagnosis.AppointmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.AppointmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   diagnosis.AppointmentTable,
			Columns: diagnosis.AppointmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Diagnosis{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{diagnosis.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
