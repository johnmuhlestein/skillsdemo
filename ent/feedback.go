// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"skillsdemo/ent/feedback"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Feedback is the model entity for the Feedback schema.
type Feedback struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// CompletionTime holds the value of the "completion_time" field.
	CompletionTime time.Time `json:"completion_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FeedbackQuery when eager-loading is set.
	Edges        FeedbackEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FeedbackEdges holds the relations/edges for other nodes in the graph.
type FeedbackEdges struct {
	// Responses holds the value of the responses edge.
	Responses []*PromptResponse `json:"responses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ResponsesOrErr returns the Responses value or an error if the edge
// was not loaded in eager-loading.
func (e FeedbackEdges) ResponsesOrErr() ([]*PromptResponse, error) {
	if e.loadedTypes[0] {
		return e.Responses, nil
	}
	return nil, &NotLoadedError{edge: "responses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Feedback) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case feedback.FieldStatus:
			values[i] = new(sql.NullString)
		case feedback.FieldStartTime, feedback.FieldCompletionTime:
			values[i] = new(sql.NullTime)
		case feedback.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Feedback fields.
func (f *Feedback) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case feedback.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				f.ID = *value
			}
		case feedback.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				f.Status = value.String
			}
		case feedback.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				f.StartTime = value.Time
			}
		case feedback.FieldCompletionTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completion_time", values[i])
			} else if value.Valid {
				f.CompletionTime = value.Time
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Feedback.
// This includes values selected through modifiers, order, etc.
func (f *Feedback) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryResponses queries the "responses" edge of the Feedback entity.
func (f *Feedback) QueryResponses() *PromptResponseQuery {
	return NewFeedbackClient(f.config).QueryResponses(f)
}

// Update returns a builder for updating this Feedback.
// Note that you need to call Feedback.Unwrap() before calling this method if this Feedback
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Feedback) Update() *FeedbackUpdateOne {
	return NewFeedbackClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Feedback entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Feedback) Unwrap() *Feedback {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Feedback is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Feedback) String() string {
	var builder strings.Builder
	builder.WriteString("Feedback(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("status=")
	builder.WriteString(f.Status)
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(f.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("completion_time=")
	builder.WriteString(f.CompletionTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Feedbacks is a parsable slice of Feedback.
type Feedbacks []*Feedback
