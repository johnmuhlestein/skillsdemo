// Code generated by ent, DO NOT EDIT.

package feedback

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the feedback type in the database.
	Label = "feedback"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldCompletionTime holds the string denoting the completion_time field in the database.
	FieldCompletionTime = "completion_time"
	// EdgeResponses holds the string denoting the responses edge name in mutations.
	EdgeResponses = "responses"
	// Table holds the table name of the feedback in the database.
	Table = "feedbacks"
	// ResponsesTable is the table that holds the responses relation/edge.
	ResponsesTable = "prompt_responses"
	// ResponsesInverseTable is the table name for the PromptResponse entity.
	// It exists in this package in order to avoid circular dependency with the "promptresponse" package.
	ResponsesInverseTable = "prompt_responses"
	// ResponsesColumn is the table column denoting the responses relation/edge.
	ResponsesColumn = "feedback_responses"
)

// Columns holds all SQL columns for feedback fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldStartTime,
	FieldCompletionTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Feedback queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByCompletionTime orders the results by the completion_time field.
func ByCompletionTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletionTime, opts...).ToFunc()
}

// ByResponsesCount orders the results by responses count.
func ByResponsesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newResponsesStep(), opts...)
	}
}

// ByResponses orders the results by responses terms.
func ByResponses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResponsesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newResponsesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResponsesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ResponsesTable, ResponsesColumn),
	)
}
