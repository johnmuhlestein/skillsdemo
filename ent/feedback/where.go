// Code generated by ent, DO NOT EDIT.

package feedback

import (
	"skillsdemo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Feedback {
	return predicate.Feedback(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Feedback {
	return predicate.Feedback(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Feedback {
	return predicate.Feedback(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Feedback {
	return predicate.Feedback(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Feedback {
	return predicate.Feedback(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Feedback {
	return predicate.Feedback(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Feedback {
	return predicate.Feedback(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Feedback {
	return predicate.Feedback(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Feedback {
	return predicate.Feedback(sql.FieldLTE(FieldID, id))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Feedback {
	return predicate.Feedback(sql.FieldEQ(FieldStatus, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldEQ(FieldStartTime, v))
}

// CompletionTime applies equality check predicate on the "completion_time" field. It's identical to CompletionTimeEQ.
func CompletionTime(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldEQ(FieldCompletionTime, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Feedback {
	return predicate.Feedback(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Feedback {
	return predicate.Feedback(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Feedback {
	return predicate.Feedback(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Feedback {
	return predicate.Feedback(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Feedback {
	return predicate.Feedback(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Feedback {
	return predicate.Feedback(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Feedback {
	return predicate.Feedback(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Feedback {
	return predicate.Feedback(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Feedback {
	return predicate.Feedback(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Feedback {
	return predicate.Feedback(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Feedback {
	return predicate.Feedback(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Feedback {
	return predicate.Feedback(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Feedback {
	return predicate.Feedback(sql.FieldContainsFold(FieldStatus, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldLTE(FieldStartTime, v))
}

// CompletionTimeEQ applies the EQ predicate on the "completion_time" field.
func CompletionTimeEQ(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldEQ(FieldCompletionTime, v))
}

// CompletionTimeNEQ applies the NEQ predicate on the "completion_time" field.
func CompletionTimeNEQ(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldNEQ(FieldCompletionTime, v))
}

// CompletionTimeIn applies the In predicate on the "completion_time" field.
func CompletionTimeIn(vs ...time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldIn(FieldCompletionTime, vs...))
}

// CompletionTimeNotIn applies the NotIn predicate on the "completion_time" field.
func CompletionTimeNotIn(vs ...time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldNotIn(FieldCompletionTime, vs...))
}

// CompletionTimeGT applies the GT predicate on the "completion_time" field.
func CompletionTimeGT(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldGT(FieldCompletionTime, v))
}

// CompletionTimeGTE applies the GTE predicate on the "completion_time" field.
func CompletionTimeGTE(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldGTE(FieldCompletionTime, v))
}

// CompletionTimeLT applies the LT predicate on the "completion_time" field.
func CompletionTimeLT(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldLT(FieldCompletionTime, v))
}

// CompletionTimeLTE applies the LTE predicate on the "completion_time" field.
func CompletionTimeLTE(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldLTE(FieldCompletionTime, v))
}

// HasResponses applies the HasEdge predicate on the "responses" edge.
func HasResponses() predicate.Feedback {
	return predicate.Feedback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ResponsesTable, ResponsesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResponsesWith applies the HasEdge predicate on the "responses" edge with a given conditions (other predicates).
func HasResponsesWith(preds ...predicate.PromptResponse) predicate.Feedback {
	return predicate.Feedback(func(s *sql.Selector) {
		step := newResponsesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Feedback) predicate.Feedback {
	return predicate.Feedback(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Feedback) predicate.Feedback {
	return predicate.Feedback(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Feedback) predicate.Feedback {
	return predicate.Feedback(sql.NotPredicates(p))
}
