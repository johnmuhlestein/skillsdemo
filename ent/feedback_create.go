// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"skillsdemo/ent/feedback"
	"skillsdemo/ent/promptresponse"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FeedbackCreate is the builder for creating a Feedback entity.
type FeedbackCreate struct {
	config
	mutation *FeedbackMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (fc *FeedbackCreate) SetStatus(s string) *FeedbackCreate {
	fc.mutation.SetStatus(s)
	return fc
}

// SetStartTime sets the "start_time" field.
func (fc *FeedbackCreate) SetStartTime(t time.Time) *FeedbackCreate {
	fc.mutation.SetStartTime(t)
	return fc
}

// SetCompletionTime sets the "completion_time" field.
func (fc *FeedbackCreate) SetCompletionTime(t time.Time) *FeedbackCreate {
	fc.mutation.SetCompletionTime(t)
	return fc
}

// SetID sets the "id" field.
func (fc *FeedbackCreate) SetID(u uuid.UUID) *FeedbackCreate {
	fc.mutation.SetID(u)
	return fc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fc *FeedbackCreate) SetNillableID(u *uuid.UUID) *FeedbackCreate {
	if u != nil {
		fc.SetID(*u)
	}
	return fc
}

// AddResponseIDs adds the "responses" edge to the PromptResponse entity by IDs.
func (fc *FeedbackCreate) AddResponseIDs(ids ...uuid.UUID) *FeedbackCreate {
	fc.mutation.AddResponseIDs(ids...)
	return fc
}

// AddResponses adds the "responses" edges to the PromptResponse entity.
func (fc *FeedbackCreate) AddResponses(p ...*PromptResponse) *FeedbackCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fc.AddResponseIDs(ids...)
}

// Mutation returns the FeedbackMutation object of the builder.
func (fc *FeedbackCreate) Mutation() *FeedbackMutation {
	return fc.mutation
}

// Save creates the Feedback in the database.
func (fc *FeedbackCreate) Save(ctx context.Context) (*Feedback, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FeedbackCreate) SaveX(ctx context.Context) *Feedback {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FeedbackCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FeedbackCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FeedbackCreate) defaults() {
	if _, ok := fc.mutation.ID(); !ok {
		v := feedback.DefaultID()
		fc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FeedbackCreate) check() error {
	if _, ok := fc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Feedback.status"`)}
	}
	if _, ok := fc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Feedback.start_time"`)}
	}
	if _, ok := fc.mutation.CompletionTime(); !ok {
		return &ValidationError{Name: "completion_time", err: errors.New(`ent: missing required field "Feedback.completion_time"`)}
	}
	return nil
}

func (fc *FeedbackCreate) sqlSave(ctx context.Context) (*Feedback, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FeedbackCreate) createSpec() (*Feedback, *sqlgraph.CreateSpec) {
	var (
		_node = &Feedback{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(feedback.Table, sqlgraph.NewFieldSpec(feedback.FieldID, field.TypeUUID))
	)
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := fc.mutation.Status(); ok {
		_spec.SetField(feedback.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := fc.mutation.StartTime(); ok {
		_spec.SetField(feedback.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := fc.mutation.CompletionTime(); ok {
		_spec.SetField(feedback.FieldCompletionTime, field.TypeTime, value)
		_node.CompletionTime = value
	}
	if nodes := fc.mutation.ResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feedback.ResponsesTable,
			Columns: []string{feedback.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promptresponse.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FeedbackCreateBulk is the builder for creating many Feedback entities in bulk.
type FeedbackCreateBulk struct {
	config
	err      error
	builders []*FeedbackCreate
}

// Save creates the Feedback entities in the database.
func (fcb *FeedbackCreateBulk) Save(ctx context.Context) ([]*Feedback, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Feedback, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeedbackMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FeedbackCreateBulk) SaveX(ctx context.Context) []*Feedback {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FeedbackCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FeedbackCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
