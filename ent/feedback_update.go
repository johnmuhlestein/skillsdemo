// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"skillsdemo/ent/feedback"
	"skillsdemo/ent/predicate"
	"skillsdemo/ent/promptresponse"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FeedbackUpdate is the builder for updating Feedback entities.
type FeedbackUpdate struct {
	config
	hooks    []Hook
	mutation *FeedbackMutation
}

// Where appends a list predicates to the FeedbackUpdate builder.
func (fu *FeedbackUpdate) Where(ps ...predicate.Feedback) *FeedbackUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetStatus sets the "status" field.
func (fu *FeedbackUpdate) SetStatus(s string) *FeedbackUpdate {
	fu.mutation.SetStatus(s)
	return fu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fu *FeedbackUpdate) SetNillableStatus(s *string) *FeedbackUpdate {
	if s != nil {
		fu.SetStatus(*s)
	}
	return fu
}

// SetStartTime sets the "start_time" field.
func (fu *FeedbackUpdate) SetStartTime(t time.Time) *FeedbackUpdate {
	fu.mutation.SetStartTime(t)
	return fu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (fu *FeedbackUpdate) SetNillableStartTime(t *time.Time) *FeedbackUpdate {
	if t != nil {
		fu.SetStartTime(*t)
	}
	return fu
}

// SetCompletionTime sets the "completion_time" field.
func (fu *FeedbackUpdate) SetCompletionTime(t time.Time) *FeedbackUpdate {
	fu.mutation.SetCompletionTime(t)
	return fu
}

// SetNillableCompletionTime sets the "completion_time" field if the given value is not nil.
func (fu *FeedbackUpdate) SetNillableCompletionTime(t *time.Time) *FeedbackUpdate {
	if t != nil {
		fu.SetCompletionTime(*t)
	}
	return fu
}

// AddResponseIDs adds the "responses" edge to the PromptResponse entity by IDs.
func (fu *FeedbackUpdate) AddResponseIDs(ids ...uuid.UUID) *FeedbackUpdate {
	fu.mutation.AddResponseIDs(ids...)
	return fu
}

// AddResponses adds the "responses" edges to the PromptResponse entity.
func (fu *FeedbackUpdate) AddResponses(p ...*PromptResponse) *FeedbackUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fu.AddResponseIDs(ids...)
}

// Mutation returns the FeedbackMutation object of the builder.
func (fu *FeedbackUpdate) Mutation() *FeedbackMutation {
	return fu.mutation
}

// ClearResponses clears all "responses" edges to the PromptResponse entity.
func (fu *FeedbackUpdate) ClearResponses() *FeedbackUpdate {
	fu.mutation.ClearResponses()
	return fu
}

// RemoveResponseIDs removes the "responses" edge to PromptResponse entities by IDs.
func (fu *FeedbackUpdate) RemoveResponseIDs(ids ...uuid.UUID) *FeedbackUpdate {
	fu.mutation.RemoveResponseIDs(ids...)
	return fu
}

// RemoveResponses removes "responses" edges to PromptResponse entities.
func (fu *FeedbackUpdate) RemoveResponses(p ...*PromptResponse) *FeedbackUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fu.RemoveResponseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FeedbackUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FeedbackUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FeedbackUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FeedbackUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FeedbackUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(feedback.Table, feedback.Columns, sqlgraph.NewFieldSpec(feedback.FieldID, field.TypeUUID))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Status(); ok {
		_spec.SetField(feedback.FieldStatus, field.TypeString, value)
	}
	if value, ok := fu.mutation.StartTime(); ok {
		_spec.SetField(feedback.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := fu.mutation.CompletionTime(); ok {
		_spec.SetField(feedback.FieldCompletionTime, field.TypeTime, value)
	}
	if fu.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feedback.ResponsesTable,
			Columns: []string{feedback.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promptresponse.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedResponsesIDs(); len(nodes) > 0 && !fu.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feedback.ResponsesTable,
			Columns: []string{feedback.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promptresponse.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feedback.ResponsesTable,
			Columns: []string{feedback.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promptresponse.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedback.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FeedbackUpdateOne is the builder for updating a single Feedback entity.
type FeedbackUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeedbackMutation
}

// SetStatus sets the "status" field.
func (fuo *FeedbackUpdateOne) SetStatus(s string) *FeedbackUpdateOne {
	fuo.mutation.SetStatus(s)
	return fuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fuo *FeedbackUpdateOne) SetNillableStatus(s *string) *FeedbackUpdateOne {
	if s != nil {
		fuo.SetStatus(*s)
	}
	return fuo
}

// SetStartTime sets the "start_time" field.
func (fuo *FeedbackUpdateOne) SetStartTime(t time.Time) *FeedbackUpdateOne {
	fuo.mutation.SetStartTime(t)
	return fuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (fuo *FeedbackUpdateOne) SetNillableStartTime(t *time.Time) *FeedbackUpdateOne {
	if t != nil {
		fuo.SetStartTime(*t)
	}
	return fuo
}

// SetCompletionTime sets the "completion_time" field.
func (fuo *FeedbackUpdateOne) SetCompletionTime(t time.Time) *FeedbackUpdateOne {
	fuo.mutation.SetCompletionTime(t)
	return fuo
}

// SetNillableCompletionTime sets the "completion_time" field if the given value is not nil.
func (fuo *FeedbackUpdateOne) SetNillableCompletionTime(t *time.Time) *FeedbackUpdateOne {
	if t != nil {
		fuo.SetCompletionTime(*t)
	}
	return fuo
}

// AddResponseIDs adds the "responses" edge to the PromptResponse entity by IDs.
func (fuo *FeedbackUpdateOne) AddResponseIDs(ids ...uuid.UUID) *FeedbackUpdateOne {
	fuo.mutation.AddResponseIDs(ids...)
	return fuo
}

// AddResponses adds the "responses" edges to the PromptResponse entity.
func (fuo *FeedbackUpdateOne) AddResponses(p ...*PromptResponse) *FeedbackUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fuo.AddResponseIDs(ids...)
}

// Mutation returns the FeedbackMutation object of the builder.
func (fuo *FeedbackUpdateOne) Mutation() *FeedbackMutation {
	return fuo.mutation
}

// ClearResponses clears all "responses" edges to the PromptResponse entity.
func (fuo *FeedbackUpdateOne) ClearResponses() *FeedbackUpdateOne {
	fuo.mutation.ClearResponses()
	return fuo
}

// RemoveResponseIDs removes the "responses" edge to PromptResponse entities by IDs.
func (fuo *FeedbackUpdateOne) RemoveResponseIDs(ids ...uuid.UUID) *FeedbackUpdateOne {
	fuo.mutation.RemoveResponseIDs(ids...)
	return fuo
}

// RemoveResponses removes "responses" edges to PromptResponse entities.
func (fuo *FeedbackUpdateOne) RemoveResponses(p ...*PromptResponse) *FeedbackUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fuo.RemoveResponseIDs(ids...)
}

// Where appends a list predicates to the FeedbackUpdate builder.
func (fuo *FeedbackUpdateOne) Where(ps ...predicate.Feedback) *FeedbackUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FeedbackUpdateOne) Select(field string, fields ...string) *FeedbackUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Feedback entity.
func (fuo *FeedbackUpdateOne) Save(ctx context.Context) (*Feedback, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FeedbackUpdateOne) SaveX(ctx context.Context) *Feedback {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FeedbackUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FeedbackUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FeedbackUpdateOne) sqlSave(ctx context.Context) (_node *Feedback, err error) {
	_spec := sqlgraph.NewUpdateSpec(feedback.Table, feedback.Columns, sqlgraph.NewFieldSpec(feedback.FieldID, field.TypeUUID))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Feedback.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feedback.FieldID)
		for _, f := range fields {
			if !feedback.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != feedback.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Status(); ok {
		_spec.SetField(feedback.FieldStatus, field.TypeString, value)
	}
	if value, ok := fuo.mutation.StartTime(); ok {
		_spec.SetField(feedback.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.CompletionTime(); ok {
		_spec.SetField(feedback.FieldCompletionTime, field.TypeTime, value)
	}
	if fuo.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feedback.ResponsesTable,
			Columns: []string{feedback.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promptresponse.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedResponsesIDs(); len(nodes) > 0 && !fuo.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feedback.ResponsesTable,
			Columns: []string{feedback.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promptresponse.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feedback.ResponsesTable,
			Columns: []string{feedback.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promptresponse.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Feedback{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedback.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
