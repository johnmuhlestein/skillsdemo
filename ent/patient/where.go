// Code generated by ent, DO NOT EDIT.

package patient

import (
	"skillsdemo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldID, id))
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldGender, v))
}

// Birtdate applies equality check predicate on the "birtdate" field. It's identical to BirtdateEQ.
func Birtdate(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldBirtdate, v))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldGender, vs...))
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldGender, v))
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldGender, v))
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldGender, v))
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldGender, v))
}

// GenderContains applies the Contains predicate on the "gender" field.
func GenderContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldGender, v))
}

// GenderHasPrefix applies the HasPrefix predicate on the "gender" field.
func GenderHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldGender, v))
}

// GenderHasSuffix applies the HasSuffix predicate on the "gender" field.
func GenderHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldGender, v))
}

// GenderEqualFold applies the EqualFold predicate on the "gender" field.
func GenderEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldGender, v))
}

// GenderContainsFold applies the ContainsFold predicate on the "gender" field.
func GenderContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldGender, v))
}

// BirtdateEQ applies the EQ predicate on the "birtdate" field.
func BirtdateEQ(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldBirtdate, v))
}

// BirtdateNEQ applies the NEQ predicate on the "birtdate" field.
func BirtdateNEQ(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldBirtdate, v))
}

// BirtdateIn applies the In predicate on the "birtdate" field.
func BirtdateIn(vs ...time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldBirtdate, vs...))
}

// BirtdateNotIn applies the NotIn predicate on the "birtdate" field.
func BirtdateNotIn(vs ...time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldBirtdate, vs...))
}

// BirtdateGT applies the GT predicate on the "birtdate" field.
func BirtdateGT(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldBirtdate, v))
}

// BirtdateGTE applies the GTE predicate on the "birtdate" field.
func BirtdateGTE(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldBirtdate, v))
}

// BirtdateLT applies the LT predicate on the "birtdate" field.
func BirtdateLT(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldBirtdate, v))
}

// BirtdateLTE applies the LTE predicate on the "birtdate" field.
func BirtdateLTE(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldBirtdate, v))
}

// BirtdateIsNil applies the IsNil predicate on the "birtdate" field.
func BirtdateIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldBirtdate))
}

// BirtdateNotNil applies the NotNil predicate on the "birtdate" field.
func BirtdateNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldBirtdate))
}

// ContactIsNil applies the IsNil predicate on the "contact" field.
func ContactIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldContact))
}

// ContactNotNil applies the NotNil predicate on the "contact" field.
func ContactNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldContact))
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldAddress))
}

// HasAppointments applies the HasEdge predicate on the "appointments" edge.
func HasAppointments() predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AppointmentsTable, AppointmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppointmentsWith applies the HasEdge predicate on the "appointments" edge with a given conditions (other predicates).
func HasAppointmentsWith(preds ...predicate.Appointment) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := newAppointmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFeedbacks applies the HasEdge predicate on the "feedbacks" edge.
func HasFeedbacks() predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FeedbacksTable, FeedbacksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFeedbacksWith applies the HasEdge predicate on the "feedbacks" edge with a given conditions (other predicates).
func HasFeedbacksWith(preds ...predicate.Feedback) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := newFeedbacksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Patient) predicate.Patient {
	return predicate.Patient(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Patient) predicate.Patient {
	return predicate.Patient(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Patient) predicate.Patient {
	return predicate.Patient(sql.NotPredicates(p))
}
