// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"skillsdemo/ent/appointment"
	"skillsdemo/ent/feedback"
	"skillsdemo/ent/patient"
	"skillsdemo/ent/predicate"
	"skillsdemo/ent/schema"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PatientUpdate is the builder for updating Patient entities.
type PatientUpdate struct {
	config
	hooks    []Hook
	mutation *PatientMutation
}

// Where appends a list predicates to the PatientUpdate builder.
func (pu *PatientUpdate) Where(ps ...predicate.Patient) *PatientUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PatientUpdate) SetName(s schema.Name) *PatientUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableName(s *schema.Name) *PatientUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetGender sets the "gender" field.
func (pu *PatientUpdate) SetGender(s string) *PatientUpdate {
	pu.mutation.SetGender(s)
	return pu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableGender(s *string) *PatientUpdate {
	if s != nil {
		pu.SetGender(*s)
	}
	return pu
}

// SetBirtdate sets the "birtdate" field.
func (pu *PatientUpdate) SetBirtdate(t time.Time) *PatientUpdate {
	pu.mutation.SetBirtdate(t)
	return pu
}

// SetNillableBirtdate sets the "birtdate" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableBirtdate(t *time.Time) *PatientUpdate {
	if t != nil {
		pu.SetBirtdate(*t)
	}
	return pu
}

// ClearBirtdate clears the value of the "birtdate" field.
func (pu *PatientUpdate) ClearBirtdate() *PatientUpdate {
	pu.mutation.ClearBirtdate()
	return pu
}

// SetContact sets the "contact" field.
func (pu *PatientUpdate) SetContact(s []schema.Contact) *PatientUpdate {
	pu.mutation.SetContact(s)
	return pu
}

// AppendContact appends s to the "contact" field.
func (pu *PatientUpdate) AppendContact(s []schema.Contact) *PatientUpdate {
	pu.mutation.AppendContact(s)
	return pu
}

// ClearContact clears the value of the "contact" field.
func (pu *PatientUpdate) ClearContact() *PatientUpdate {
	pu.mutation.ClearContact()
	return pu
}

// SetAddress sets the "address" field.
func (pu *PatientUpdate) SetAddress(s []schema.Address) *PatientUpdate {
	pu.mutation.SetAddress(s)
	return pu
}

// AppendAddress appends s to the "address" field.
func (pu *PatientUpdate) AppendAddress(s []schema.Address) *PatientUpdate {
	pu.mutation.AppendAddress(s)
	return pu
}

// ClearAddress clears the value of the "address" field.
func (pu *PatientUpdate) ClearAddress() *PatientUpdate {
	pu.mutation.ClearAddress()
	return pu
}

// AddAppointmentIDs adds the "appointments" edge to the Appointment entity by IDs.
func (pu *PatientUpdate) AddAppointmentIDs(ids ...uuid.UUID) *PatientUpdate {
	pu.mutation.AddAppointmentIDs(ids...)
	return pu
}

// AddAppointments adds the "appointments" edges to the Appointment entity.
func (pu *PatientUpdate) AddAppointments(a ...*Appointment) *PatientUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddAppointmentIDs(ids...)
}

// AddFeedbackIDs adds the "feedbacks" edge to the Feedback entity by IDs.
func (pu *PatientUpdate) AddFeedbackIDs(ids ...uuid.UUID) *PatientUpdate {
	pu.mutation.AddFeedbackIDs(ids...)
	return pu
}

// AddFeedbacks adds the "feedbacks" edges to the Feedback entity.
func (pu *PatientUpdate) AddFeedbacks(f ...*Feedback) *PatientUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.AddFeedbackIDs(ids...)
}

// Mutation returns the PatientMutation object of the builder.
func (pu *PatientUpdate) Mutation() *PatientMutation {
	return pu.mutation
}

// ClearAppointments clears all "appointments" edges to the Appointment entity.
func (pu *PatientUpdate) ClearAppointments() *PatientUpdate {
	pu.mutation.ClearAppointments()
	return pu
}

// RemoveAppointmentIDs removes the "appointments" edge to Appointment entities by IDs.
func (pu *PatientUpdate) RemoveAppointmentIDs(ids ...uuid.UUID) *PatientUpdate {
	pu.mutation.RemoveAppointmentIDs(ids...)
	return pu
}

// RemoveAppointments removes "appointments" edges to Appointment entities.
func (pu *PatientUpdate) RemoveAppointments(a ...*Appointment) *PatientUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveAppointmentIDs(ids...)
}

// ClearFeedbacks clears all "feedbacks" edges to the Feedback entity.
func (pu *PatientUpdate) ClearFeedbacks() *PatientUpdate {
	pu.mutation.ClearFeedbacks()
	return pu
}

// RemoveFeedbackIDs removes the "feedbacks" edge to Feedback entities by IDs.
func (pu *PatientUpdate) RemoveFeedbackIDs(ids ...uuid.UUID) *PatientUpdate {
	pu.mutation.RemoveFeedbackIDs(ids...)
	return pu
}

// RemoveFeedbacks removes "feedbacks" edges to Feedback entities.
func (pu *PatientUpdate) RemoveFeedbacks(f ...*Feedback) *PatientUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.RemoveFeedbackIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PatientUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PatientUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PatientUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PatientUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PatientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(patient.Table, patient.Columns, sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(patient.FieldName, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.Gender(); ok {
		_spec.SetField(patient.FieldGender, field.TypeString, value)
	}
	if value, ok := pu.mutation.Birtdate(); ok {
		_spec.SetField(patient.FieldBirtdate, field.TypeTime, value)
	}
	if pu.mutation.BirtdateCleared() {
		_spec.ClearField(patient.FieldBirtdate, field.TypeTime)
	}
	if value, ok := pu.mutation.Contact(); ok {
		_spec.SetField(patient.FieldContact, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedContact(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, patient.FieldContact, value)
		})
	}
	if pu.mutation.ContactCleared() {
		_spec.ClearField(patient.FieldContact, field.TypeJSON)
	}
	if value, ok := pu.mutation.Address(); ok {
		_spec.SetField(patient.FieldAddress, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedAddress(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, patient.FieldAddress, value)
		})
	}
	if pu.mutation.AddressCleared() {
		_spec.ClearField(patient.FieldAddress, field.TypeJSON)
	}
	if pu.mutation.AppointmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.AppointmentsTable,
			Columns: []string{patient.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAppointmentsIDs(); len(nodes) > 0 && !pu.mutation.AppointmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.AppointmentsTable,
			Columns: []string{patient.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AppointmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.AppointmentsTable,
			Columns: []string{patient.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.FeedbacksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.FeedbacksTable,
			Columns: []string{patient.FeedbacksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedback.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedFeedbacksIDs(); len(nodes) > 0 && !pu.mutation.FeedbacksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.FeedbacksTable,
			Columns: []string{patient.FeedbacksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedback.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FeedbacksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.FeedbacksTable,
			Columns: []string{patient.FeedbacksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedback.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PatientUpdateOne is the builder for updating a single Patient entity.
type PatientUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PatientMutation
}

// SetName sets the "name" field.
func (puo *PatientUpdateOne) SetName(s schema.Name) *PatientUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableName(s *schema.Name) *PatientUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetGender sets the "gender" field.
func (puo *PatientUpdateOne) SetGender(s string) *PatientUpdateOne {
	puo.mutation.SetGender(s)
	return puo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableGender(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetGender(*s)
	}
	return puo
}

// SetBirtdate sets the "birtdate" field.
func (puo *PatientUpdateOne) SetBirtdate(t time.Time) *PatientUpdateOne {
	puo.mutation.SetBirtdate(t)
	return puo
}

// SetNillableBirtdate sets the "birtdate" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableBirtdate(t *time.Time) *PatientUpdateOne {
	if t != nil {
		puo.SetBirtdate(*t)
	}
	return puo
}

// ClearBirtdate clears the value of the "birtdate" field.
func (puo *PatientUpdateOne) ClearBirtdate() *PatientUpdateOne {
	puo.mutation.ClearBirtdate()
	return puo
}

// SetContact sets the "contact" field.
func (puo *PatientUpdateOne) SetContact(s []schema.Contact) *PatientUpdateOne {
	puo.mutation.SetContact(s)
	return puo
}

// AppendContact appends s to the "contact" field.
func (puo *PatientUpdateOne) AppendContact(s []schema.Contact) *PatientUpdateOne {
	puo.mutation.AppendContact(s)
	return puo
}

// ClearContact clears the value of the "contact" field.
func (puo *PatientUpdateOne) ClearContact() *PatientUpdateOne {
	puo.mutation.ClearContact()
	return puo
}

// SetAddress sets the "address" field.
func (puo *PatientUpdateOne) SetAddress(s []schema.Address) *PatientUpdateOne {
	puo.mutation.SetAddress(s)
	return puo
}

// AppendAddress appends s to the "address" field.
func (puo *PatientUpdateOne) AppendAddress(s []schema.Address) *PatientUpdateOne {
	puo.mutation.AppendAddress(s)
	return puo
}

// ClearAddress clears the value of the "address" field.
func (puo *PatientUpdateOne) ClearAddress() *PatientUpdateOne {
	puo.mutation.ClearAddress()
	return puo
}

// AddAppointmentIDs adds the "appointments" edge to the Appointment entity by IDs.
func (puo *PatientUpdateOne) AddAppointmentIDs(ids ...uuid.UUID) *PatientUpdateOne {
	puo.mutation.AddAppointmentIDs(ids...)
	return puo
}

// AddAppointments adds the "appointments" edges to the Appointment entity.
func (puo *PatientUpdateOne) AddAppointments(a ...*Appointment) *PatientUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddAppointmentIDs(ids...)
}

// AddFeedbackIDs adds the "feedbacks" edge to the Feedback entity by IDs.
func (puo *PatientUpdateOne) AddFeedbackIDs(ids ...uuid.UUID) *PatientUpdateOne {
	puo.mutation.AddFeedbackIDs(ids...)
	return puo
}

// AddFeedbacks adds the "feedbacks" edges to the Feedback entity.
func (puo *PatientUpdateOne) AddFeedbacks(f ...*Feedback) *PatientUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.AddFeedbackIDs(ids...)
}

// Mutation returns the PatientMutation object of the builder.
func (puo *PatientUpdateOne) Mutation() *PatientMutation {
	return puo.mutation
}

// ClearAppointments clears all "appointments" edges to the Appointment entity.
func (puo *PatientUpdateOne) ClearAppointments() *PatientUpdateOne {
	puo.mutation.ClearAppointments()
	return puo
}

// RemoveAppointmentIDs removes the "appointments" edge to Appointment entities by IDs.
func (puo *PatientUpdateOne) RemoveAppointmentIDs(ids ...uuid.UUID) *PatientUpdateOne {
	puo.mutation.RemoveAppointmentIDs(ids...)
	return puo
}

// RemoveAppointments removes "appointments" edges to Appointment entities.
func (puo *PatientUpdateOne) RemoveAppointments(a ...*Appointment) *PatientUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveAppointmentIDs(ids...)
}

// ClearFeedbacks clears all "feedbacks" edges to the Feedback entity.
func (puo *PatientUpdateOne) ClearFeedbacks() *PatientUpdateOne {
	puo.mutation.ClearFeedbacks()
	return puo
}

// RemoveFeedbackIDs removes the "feedbacks" edge to Feedback entities by IDs.
func (puo *PatientUpdateOne) RemoveFeedbackIDs(ids ...uuid.UUID) *PatientUpdateOne {
	puo.mutation.RemoveFeedbackIDs(ids...)
	return puo
}

// RemoveFeedbacks removes "feedbacks" edges to Feedback entities.
func (puo *PatientUpdateOne) RemoveFeedbacks(f ...*Feedback) *PatientUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.RemoveFeedbackIDs(ids...)
}

// Where appends a list predicates to the PatientUpdate builder.
func (puo *PatientUpdateOne) Where(ps ...predicate.Patient) *PatientUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PatientUpdateOne) Select(field string, fields ...string) *PatientUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Patient entity.
func (puo *PatientUpdateOne) Save(ctx context.Context) (*Patient, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PatientUpdateOne) SaveX(ctx context.Context) *Patient {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PatientUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PatientUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PatientUpdateOne) sqlSave(ctx context.Context) (_node *Patient, err error) {
	_spec := sqlgraph.NewUpdateSpec(patient.Table, patient.Columns, sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Patient.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, patient.FieldID)
		for _, f := range fields {
			if !patient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != patient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(patient.FieldName, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.Gender(); ok {
		_spec.SetField(patient.FieldGender, field.TypeString, value)
	}
	if value, ok := puo.mutation.Birtdate(); ok {
		_spec.SetField(patient.FieldBirtdate, field.TypeTime, value)
	}
	if puo.mutation.BirtdateCleared() {
		_spec.ClearField(patient.FieldBirtdate, field.TypeTime)
	}
	if value, ok := puo.mutation.Contact(); ok {
		_spec.SetField(patient.FieldContact, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedContact(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, patient.FieldContact, value)
		})
	}
	if puo.mutation.ContactCleared() {
		_spec.ClearField(patient.FieldContact, field.TypeJSON)
	}
	if value, ok := puo.mutation.Address(); ok {
		_spec.SetField(patient.FieldAddress, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedAddress(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, patient.FieldAddress, value)
		})
	}
	if puo.mutation.AddressCleared() {
		_spec.ClearField(patient.FieldAddress, field.TypeJSON)
	}
	if puo.mutation.AppointmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.AppointmentsTable,
			Columns: []string{patient.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAppointmentsIDs(); len(nodes) > 0 && !puo.mutation.AppointmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.AppointmentsTable,
			Columns: []string{patient.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AppointmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.AppointmentsTable,
			Columns: []string{patient.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.FeedbacksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.FeedbacksTable,
			Columns: []string{patient.FeedbacksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedback.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedFeedbacksIDs(); len(nodes) > 0 && !puo.mutation.FeedbacksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.FeedbacksTable,
			Columns: []string{patient.FeedbacksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedback.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FeedbacksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.FeedbacksTable,
			Columns: []string{patient.FeedbacksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedback.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Patient{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
