// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"skillsdemo/ent/predicate"
	"skillsdemo/ent/prompt"
	"skillsdemo/ent/schema"
	"skillsdemo/ent/survey"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PromptUpdate is the builder for updating Prompt entities.
type PromptUpdate struct {
	config
	hooks    []Hook
	mutation *PromptMutation
}

// Where appends a list predicates to the PromptUpdate builder.
func (pu *PromptUpdate) Where(ps ...predicate.Prompt) *PromptUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetSortOrder sets the "sort_order" field.
func (pu *PromptUpdate) SetSortOrder(i int) *PromptUpdate {
	pu.mutation.ResetSortOrder()
	pu.mutation.SetSortOrder(i)
	return pu
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableSortOrder(i *int) *PromptUpdate {
	if i != nil {
		pu.SetSortOrder(*i)
	}
	return pu
}

// AddSortOrder adds i to the "sort_order" field.
func (pu *PromptUpdate) AddSortOrder(i int) *PromptUpdate {
	pu.mutation.AddSortOrder(i)
	return pu
}

// SetTitle sets the "title" field.
func (pu *PromptUpdate) SetTitle(s string) *PromptUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableTitle(s *string) *PromptUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// SetDescription sets the "description" field.
func (pu *PromptUpdate) SetDescription(s string) *PromptUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableDescription(s *string) *PromptUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PromptUpdate) ClearDescription() *PromptUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetResponseType sets the "response_type" field.
func (pu *PromptUpdate) SetResponseType(s schema.Measure) *PromptUpdate {
	pu.mutation.SetResponseType(s)
	return pu
}

// SetNillableResponseType sets the "response_type" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableResponseType(s *schema.Measure) *PromptUpdate {
	if s != nil {
		pu.SetResponseType(*s)
	}
	return pu
}

// SetAdditionalFeedback sets the "additional_feedback" field.
func (pu *PromptUpdate) SetAdditionalFeedback(b bool) *PromptUpdate {
	pu.mutation.SetAdditionalFeedback(b)
	return pu
}

// SetNillableAdditionalFeedback sets the "additional_feedback" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableAdditionalFeedback(b *bool) *PromptUpdate {
	if b != nil {
		pu.SetAdditionalFeedback(*b)
	}
	return pu
}

// SetSurveyID sets the "survey" edge to the Survey entity by ID.
func (pu *PromptUpdate) SetSurveyID(id uuid.UUID) *PromptUpdate {
	pu.mutation.SetSurveyID(id)
	return pu
}

// SetNillableSurveyID sets the "survey" edge to the Survey entity by ID if the given value is not nil.
func (pu *PromptUpdate) SetNillableSurveyID(id *uuid.UUID) *PromptUpdate {
	if id != nil {
		pu = pu.SetSurveyID(*id)
	}
	return pu
}

// SetSurvey sets the "survey" edge to the Survey entity.
func (pu *PromptUpdate) SetSurvey(s *Survey) *PromptUpdate {
	return pu.SetSurveyID(s.ID)
}

// Mutation returns the PromptMutation object of the builder.
func (pu *PromptUpdate) Mutation() *PromptMutation {
	return pu.mutation
}

// ClearSurvey clears the "survey" edge to the Survey entity.
func (pu *PromptUpdate) ClearSurvey() *PromptUpdate {
	pu.mutation.ClearSurvey()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PromptUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PromptUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PromptUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PromptUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PromptUpdate) check() error {
	if v, ok := pu.mutation.SortOrder(); ok {
		if err := prompt.SortOrderValidator(v); err != nil {
			return &ValidationError{Name: "sort_order", err: fmt.Errorf(`ent: validator failed for field "Prompt.sort_order": %w`, err)}
		}
	}
	return nil
}

func (pu *PromptUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(prompt.Table, prompt.Columns, sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.SortOrder(); ok {
		_spec.SetField(prompt.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedSortOrder(); ok {
		_spec.AddField(prompt.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(prompt.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(prompt.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(prompt.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.ResponseType(); ok {
		_spec.SetField(prompt.FieldResponseType, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AdditionalFeedback(); ok {
		_spec.SetField(prompt.FieldAdditionalFeedback, field.TypeBool, value)
	}
	if pu.mutation.SurveyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prompt.SurveyTable,
			Columns: []string{prompt.SurveyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SurveyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prompt.SurveyTable,
			Columns: []string{prompt.SurveyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prompt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PromptUpdateOne is the builder for updating a single Prompt entity.
type PromptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PromptMutation
}

// SetSortOrder sets the "sort_order" field.
func (puo *PromptUpdateOne) SetSortOrder(i int) *PromptUpdateOne {
	puo.mutation.ResetSortOrder()
	puo.mutation.SetSortOrder(i)
	return puo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableSortOrder(i *int) *PromptUpdateOne {
	if i != nil {
		puo.SetSortOrder(*i)
	}
	return puo
}

// AddSortOrder adds i to the "sort_order" field.
func (puo *PromptUpdateOne) AddSortOrder(i int) *PromptUpdateOne {
	puo.mutation.AddSortOrder(i)
	return puo
}

// SetTitle sets the "title" field.
func (puo *PromptUpdateOne) SetTitle(s string) *PromptUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableTitle(s *string) *PromptUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// SetDescription sets the "description" field.
func (puo *PromptUpdateOne) SetDescription(s string) *PromptUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableDescription(s *string) *PromptUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PromptUpdateOne) ClearDescription() *PromptUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetResponseType sets the "response_type" field.
func (puo *PromptUpdateOne) SetResponseType(s schema.Measure) *PromptUpdateOne {
	puo.mutation.SetResponseType(s)
	return puo
}

// SetNillableResponseType sets the "response_type" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableResponseType(s *schema.Measure) *PromptUpdateOne {
	if s != nil {
		puo.SetResponseType(*s)
	}
	return puo
}

// SetAdditionalFeedback sets the "additional_feedback" field.
func (puo *PromptUpdateOne) SetAdditionalFeedback(b bool) *PromptUpdateOne {
	puo.mutation.SetAdditionalFeedback(b)
	return puo
}

// SetNillableAdditionalFeedback sets the "additional_feedback" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableAdditionalFeedback(b *bool) *PromptUpdateOne {
	if b != nil {
		puo.SetAdditionalFeedback(*b)
	}
	return puo
}

// SetSurveyID sets the "survey" edge to the Survey entity by ID.
func (puo *PromptUpdateOne) SetSurveyID(id uuid.UUID) *PromptUpdateOne {
	puo.mutation.SetSurveyID(id)
	return puo
}

// SetNillableSurveyID sets the "survey" edge to the Survey entity by ID if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableSurveyID(id *uuid.UUID) *PromptUpdateOne {
	if id != nil {
		puo = puo.SetSurveyID(*id)
	}
	return puo
}

// SetSurvey sets the "survey" edge to the Survey entity.
func (puo *PromptUpdateOne) SetSurvey(s *Survey) *PromptUpdateOne {
	return puo.SetSurveyID(s.ID)
}

// Mutation returns the PromptMutation object of the builder.
func (puo *PromptUpdateOne) Mutation() *PromptMutation {
	return puo.mutation
}

// ClearSurvey clears the "survey" edge to the Survey entity.
func (puo *PromptUpdateOne) ClearSurvey() *PromptUpdateOne {
	puo.mutation.ClearSurvey()
	return puo
}

// Where appends a list predicates to the PromptUpdate builder.
func (puo *PromptUpdateOne) Where(ps ...predicate.Prompt) *PromptUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PromptUpdateOne) Select(field string, fields ...string) *PromptUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Prompt entity.
func (puo *PromptUpdateOne) Save(ctx context.Context) (*Prompt, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PromptUpdateOne) SaveX(ctx context.Context) *Prompt {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PromptUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PromptUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PromptUpdateOne) check() error {
	if v, ok := puo.mutation.SortOrder(); ok {
		if err := prompt.SortOrderValidator(v); err != nil {
			return &ValidationError{Name: "sort_order", err: fmt.Errorf(`ent: validator failed for field "Prompt.sort_order": %w`, err)}
		}
	}
	return nil
}

func (puo *PromptUpdateOne) sqlSave(ctx context.Context) (_node *Prompt, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(prompt.Table, prompt.Columns, sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Prompt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, prompt.FieldID)
		for _, f := range fields {
			if !prompt.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != prompt.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.SortOrder(); ok {
		_spec.SetField(prompt.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedSortOrder(); ok {
		_spec.AddField(prompt.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(prompt.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(prompt.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(prompt.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.ResponseType(); ok {
		_spec.SetField(prompt.FieldResponseType, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AdditionalFeedback(); ok {
		_spec.SetField(prompt.FieldAdditionalFeedback, field.TypeBool, value)
	}
	if puo.mutation.SurveyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prompt.SurveyTable,
			Columns: []string{prompt.SurveyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SurveyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prompt.SurveyTable,
			Columns: []string{prompt.SurveyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Prompt{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prompt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
