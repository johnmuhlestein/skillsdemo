// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"skillsdemo/ent/feedback"
	"skillsdemo/ent/promptresponse"
	"skillsdemo/ent/schema"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PromptResponseCreate is the builder for creating a PromptResponse entity.
type PromptResponseCreate struct {
	config
	mutation *PromptResponseMutation
	hooks    []Hook
}

// SetParsedTemplate sets the "parsed_template" field.
func (prc *PromptResponseCreate) SetParsedTemplate(s string) *PromptResponseCreate {
	prc.mutation.SetParsedTemplate(s)
	return prc
}

// SetPromptIndex sets the "prompt_index" field.
func (prc *PromptResponseCreate) SetPromptIndex(i int) *PromptResponseCreate {
	prc.mutation.SetPromptIndex(i)
	return prc
}

// SetRangeValue sets the "range_value" field.
func (prc *PromptResponseCreate) SetRangeValue(i int) *PromptResponseCreate {
	prc.mutation.SetRangeValue(i)
	return prc
}

// SetNillableRangeValue sets the "range_value" field if the given value is not nil.
func (prc *PromptResponseCreate) SetNillableRangeValue(i *int) *PromptResponseCreate {
	if i != nil {
		prc.SetRangeValue(*i)
	}
	return prc
}

// SetBoolValue sets the "bool_value" field.
func (prc *PromptResponseCreate) SetBoolValue(s string) *PromptResponseCreate {
	prc.mutation.SetBoolValue(s)
	return prc
}

// SetNillableBoolValue sets the "bool_value" field if the given value is not nil.
func (prc *PromptResponseCreate) SetNillableBoolValue(s *string) *PromptResponseCreate {
	if s != nil {
		prc.SetBoolValue(*s)
	}
	return prc
}

// SetEnumValue sets the "enum_value" field.
func (prc *PromptResponseCreate) SetEnumValue(se schema.MeasureEnum) *PromptResponseCreate {
	prc.mutation.SetEnumValue(se)
	return prc
}

// SetNillableEnumValue sets the "enum_value" field if the given value is not nil.
func (prc *PromptResponseCreate) SetNillableEnumValue(se *schema.MeasureEnum) *PromptResponseCreate {
	if se != nil {
		prc.SetEnumValue(*se)
	}
	return prc
}

// SetLabelValues sets the "label_values" field.
func (prc *PromptResponseCreate) SetLabelValues(s []string) *PromptResponseCreate {
	prc.mutation.SetLabelValues(s)
	return prc
}

// SetFreeformValue sets the "freeform_value" field.
func (prc *PromptResponseCreate) SetFreeformValue(s string) *PromptResponseCreate {
	prc.mutation.SetFreeformValue(s)
	return prc
}

// SetNillableFreeformValue sets the "freeform_value" field if the given value is not nil.
func (prc *PromptResponseCreate) SetNillableFreeformValue(s *string) *PromptResponseCreate {
	if s != nil {
		prc.SetFreeformValue(*s)
	}
	return prc
}

// SetAnsweredTime sets the "answered_time" field.
func (prc *PromptResponseCreate) SetAnsweredTime(t time.Time) *PromptResponseCreate {
	prc.mutation.SetAnsweredTime(t)
	return prc
}

// SetNillableAnsweredTime sets the "answered_time" field if the given value is not nil.
func (prc *PromptResponseCreate) SetNillableAnsweredTime(t *time.Time) *PromptResponseCreate {
	if t != nil {
		prc.SetAnsweredTime(*t)
	}
	return prc
}

// SetID sets the "id" field.
func (prc *PromptResponseCreate) SetID(u uuid.UUID) *PromptResponseCreate {
	prc.mutation.SetID(u)
	return prc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (prc *PromptResponseCreate) SetNillableID(u *uuid.UUID) *PromptResponseCreate {
	if u != nil {
		prc.SetID(*u)
	}
	return prc
}

// SetFeedbackID sets the "feedback" edge to the Feedback entity by ID.
func (prc *PromptResponseCreate) SetFeedbackID(id uuid.UUID) *PromptResponseCreate {
	prc.mutation.SetFeedbackID(id)
	return prc
}

// SetNillableFeedbackID sets the "feedback" edge to the Feedback entity by ID if the given value is not nil.
func (prc *PromptResponseCreate) SetNillableFeedbackID(id *uuid.UUID) *PromptResponseCreate {
	if id != nil {
		prc = prc.SetFeedbackID(*id)
	}
	return prc
}

// SetFeedback sets the "feedback" edge to the Feedback entity.
func (prc *PromptResponseCreate) SetFeedback(f *Feedback) *PromptResponseCreate {
	return prc.SetFeedbackID(f.ID)
}

// Mutation returns the PromptResponseMutation object of the builder.
func (prc *PromptResponseCreate) Mutation() *PromptResponseMutation {
	return prc.mutation
}

// Save creates the PromptResponse in the database.
func (prc *PromptResponseCreate) Save(ctx context.Context) (*PromptResponse, error) {
	prc.defaults()
	return withHooks(ctx, prc.sqlSave, prc.mutation, prc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prc *PromptResponseCreate) SaveX(ctx context.Context) *PromptResponse {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *PromptResponseCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *PromptResponseCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prc *PromptResponseCreate) defaults() {
	if _, ok := prc.mutation.ID(); !ok {
		v := promptresponse.DefaultID()
		prc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *PromptResponseCreate) check() error {
	if _, ok := prc.mutation.ParsedTemplate(); !ok {
		return &ValidationError{Name: "parsed_template", err: errors.New(`ent: missing required field "PromptResponse.parsed_template"`)}
	}
	if _, ok := prc.mutation.PromptIndex(); !ok {
		return &ValidationError{Name: "prompt_index", err: errors.New(`ent: missing required field "PromptResponse.prompt_index"`)}
	}
	if v, ok := prc.mutation.PromptIndex(); ok {
		if err := promptresponse.PromptIndexValidator(v); err != nil {
			return &ValidationError{Name: "prompt_index", err: fmt.Errorf(`ent: validator failed for field "PromptResponse.prompt_index": %w`, err)}
		}
	}
	return nil
}

func (prc *PromptResponseCreate) sqlSave(ctx context.Context) (*PromptResponse, error) {
	if err := prc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	prc.mutation.id = &_node.ID
	prc.mutation.done = true
	return _node, nil
}

func (prc *PromptResponseCreate) createSpec() (*PromptResponse, *sqlgraph.CreateSpec) {
	var (
		_node = &PromptResponse{config: prc.config}
		_spec = sqlgraph.NewCreateSpec(promptresponse.Table, sqlgraph.NewFieldSpec(promptresponse.FieldID, field.TypeUUID))
	)
	if id, ok := prc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := prc.mutation.ParsedTemplate(); ok {
		_spec.SetField(promptresponse.FieldParsedTemplate, field.TypeString, value)
		_node.ParsedTemplate = value
	}
	if value, ok := prc.mutation.PromptIndex(); ok {
		_spec.SetField(promptresponse.FieldPromptIndex, field.TypeInt, value)
		_node.PromptIndex = value
	}
	if value, ok := prc.mutation.RangeValue(); ok {
		_spec.SetField(promptresponse.FieldRangeValue, field.TypeInt, value)
		_node.RangeValue = &value
	}
	if value, ok := prc.mutation.BoolValue(); ok {
		_spec.SetField(promptresponse.FieldBoolValue, field.TypeString, value)
		_node.BoolValue = &value
	}
	if value, ok := prc.mutation.EnumValue(); ok {
		_spec.SetField(promptresponse.FieldEnumValue, field.TypeJSON, value)
		_node.EnumValue = value
	}
	if value, ok := prc.mutation.LabelValues(); ok {
		_spec.SetField(promptresponse.FieldLabelValues, field.TypeJSON, value)
		_node.LabelValues = value
	}
	if value, ok := prc.mutation.FreeformValue(); ok {
		_spec.SetField(promptresponse.FieldFreeformValue, field.TypeString, value)
		_node.FreeformValue = &value
	}
	if value, ok := prc.mutation.AnsweredTime(); ok {
		_spec.SetField(promptresponse.FieldAnsweredTime, field.TypeTime, value)
		_node.AnsweredTime = &value
	}
	if nodes := prc.mutation.FeedbackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promptresponse.FeedbackTable,
			Columns: []string{promptresponse.FeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedback.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.feedback_responses = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PromptResponseCreateBulk is the builder for creating many PromptResponse entities in bulk.
type PromptResponseCreateBulk struct {
	config
	err      error
	builders []*PromptResponseCreate
}

// Save creates the PromptResponse entities in the database.
func (prcb *PromptResponseCreateBulk) Save(ctx context.Context) ([]*PromptResponse, error) {
	if prcb.err != nil {
		return nil, prcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*PromptResponse, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PromptResponseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *PromptResponseCreateBulk) SaveX(ctx context.Context) []*PromptResponse {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *PromptResponseCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *PromptResponseCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}
