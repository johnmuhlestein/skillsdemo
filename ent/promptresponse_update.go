// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"skillsdemo/ent/feedback"
	"skillsdemo/ent/predicate"
	"skillsdemo/ent/promptresponse"
	"skillsdemo/ent/schema"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PromptResponseUpdate is the builder for updating PromptResponse entities.
type PromptResponseUpdate struct {
	config
	hooks    []Hook
	mutation *PromptResponseMutation
}

// Where appends a list predicates to the PromptResponseUpdate builder.
func (pru *PromptResponseUpdate) Where(ps ...predicate.PromptResponse) *PromptResponseUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetParsedTemplate sets the "parsed_template" field.
func (pru *PromptResponseUpdate) SetParsedTemplate(s string) *PromptResponseUpdate {
	pru.mutation.SetParsedTemplate(s)
	return pru
}

// SetNillableParsedTemplate sets the "parsed_template" field if the given value is not nil.
func (pru *PromptResponseUpdate) SetNillableParsedTemplate(s *string) *PromptResponseUpdate {
	if s != nil {
		pru.SetParsedTemplate(*s)
	}
	return pru
}

// SetPromptIndex sets the "prompt_index" field.
func (pru *PromptResponseUpdate) SetPromptIndex(i int) *PromptResponseUpdate {
	pru.mutation.ResetPromptIndex()
	pru.mutation.SetPromptIndex(i)
	return pru
}

// SetNillablePromptIndex sets the "prompt_index" field if the given value is not nil.
func (pru *PromptResponseUpdate) SetNillablePromptIndex(i *int) *PromptResponseUpdate {
	if i != nil {
		pru.SetPromptIndex(*i)
	}
	return pru
}

// AddPromptIndex adds i to the "prompt_index" field.
func (pru *PromptResponseUpdate) AddPromptIndex(i int) *PromptResponseUpdate {
	pru.mutation.AddPromptIndex(i)
	return pru
}

// SetRangeValue sets the "range_value" field.
func (pru *PromptResponseUpdate) SetRangeValue(i int) *PromptResponseUpdate {
	pru.mutation.ResetRangeValue()
	pru.mutation.SetRangeValue(i)
	return pru
}

// SetNillableRangeValue sets the "range_value" field if the given value is not nil.
func (pru *PromptResponseUpdate) SetNillableRangeValue(i *int) *PromptResponseUpdate {
	if i != nil {
		pru.SetRangeValue(*i)
	}
	return pru
}

// AddRangeValue adds i to the "range_value" field.
func (pru *PromptResponseUpdate) AddRangeValue(i int) *PromptResponseUpdate {
	pru.mutation.AddRangeValue(i)
	return pru
}

// ClearRangeValue clears the value of the "range_value" field.
func (pru *PromptResponseUpdate) ClearRangeValue() *PromptResponseUpdate {
	pru.mutation.ClearRangeValue()
	return pru
}

// SetBoolValue sets the "bool_value" field.
func (pru *PromptResponseUpdate) SetBoolValue(s string) *PromptResponseUpdate {
	pru.mutation.SetBoolValue(s)
	return pru
}

// SetNillableBoolValue sets the "bool_value" field if the given value is not nil.
func (pru *PromptResponseUpdate) SetNillableBoolValue(s *string) *PromptResponseUpdate {
	if s != nil {
		pru.SetBoolValue(*s)
	}
	return pru
}

// ClearBoolValue clears the value of the "bool_value" field.
func (pru *PromptResponseUpdate) ClearBoolValue() *PromptResponseUpdate {
	pru.mutation.ClearBoolValue()
	return pru
}

// SetEnumValue sets the "enum_value" field.
func (pru *PromptResponseUpdate) SetEnumValue(se schema.MeasureEnum) *PromptResponseUpdate {
	pru.mutation.SetEnumValue(se)
	return pru
}

// SetNillableEnumValue sets the "enum_value" field if the given value is not nil.
func (pru *PromptResponseUpdate) SetNillableEnumValue(se *schema.MeasureEnum) *PromptResponseUpdate {
	if se != nil {
		pru.SetEnumValue(*se)
	}
	return pru
}

// ClearEnumValue clears the value of the "enum_value" field.
func (pru *PromptResponseUpdate) ClearEnumValue() *PromptResponseUpdate {
	pru.mutation.ClearEnumValue()
	return pru
}

// SetLabelValues sets the "label_values" field.
func (pru *PromptResponseUpdate) SetLabelValues(s []string) *PromptResponseUpdate {
	pru.mutation.SetLabelValues(s)
	return pru
}

// AppendLabelValues appends s to the "label_values" field.
func (pru *PromptResponseUpdate) AppendLabelValues(s []string) *PromptResponseUpdate {
	pru.mutation.AppendLabelValues(s)
	return pru
}

// ClearLabelValues clears the value of the "label_values" field.
func (pru *PromptResponseUpdate) ClearLabelValues() *PromptResponseUpdate {
	pru.mutation.ClearLabelValues()
	return pru
}

// SetFreeformValue sets the "freeform_value" field.
func (pru *PromptResponseUpdate) SetFreeformValue(s string) *PromptResponseUpdate {
	pru.mutation.SetFreeformValue(s)
	return pru
}

// SetNillableFreeformValue sets the "freeform_value" field if the given value is not nil.
func (pru *PromptResponseUpdate) SetNillableFreeformValue(s *string) *PromptResponseUpdate {
	if s != nil {
		pru.SetFreeformValue(*s)
	}
	return pru
}

// ClearFreeformValue clears the value of the "freeform_value" field.
func (pru *PromptResponseUpdate) ClearFreeformValue() *PromptResponseUpdate {
	pru.mutation.ClearFreeformValue()
	return pru
}

// SetAnsweredTime sets the "answered_time" field.
func (pru *PromptResponseUpdate) SetAnsweredTime(t time.Time) *PromptResponseUpdate {
	pru.mutation.SetAnsweredTime(t)
	return pru
}

// SetNillableAnsweredTime sets the "answered_time" field if the given value is not nil.
func (pru *PromptResponseUpdate) SetNillableAnsweredTime(t *time.Time) *PromptResponseUpdate {
	if t != nil {
		pru.SetAnsweredTime(*t)
	}
	return pru
}

// ClearAnsweredTime clears the value of the "answered_time" field.
func (pru *PromptResponseUpdate) ClearAnsweredTime() *PromptResponseUpdate {
	pru.mutation.ClearAnsweredTime()
	return pru
}

// SetFeedbackID sets the "feedback" edge to the Feedback entity by ID.
func (pru *PromptResponseUpdate) SetFeedbackID(id uuid.UUID) *PromptResponseUpdate {
	pru.mutation.SetFeedbackID(id)
	return pru
}

// SetNillableFeedbackID sets the "feedback" edge to the Feedback entity by ID if the given value is not nil.
func (pru *PromptResponseUpdate) SetNillableFeedbackID(id *uuid.UUID) *PromptResponseUpdate {
	if id != nil {
		pru = pru.SetFeedbackID(*id)
	}
	return pru
}

// SetFeedback sets the "feedback" edge to the Feedback entity.
func (pru *PromptResponseUpdate) SetFeedback(f *Feedback) *PromptResponseUpdate {
	return pru.SetFeedbackID(f.ID)
}

// Mutation returns the PromptResponseMutation object of the builder.
func (pru *PromptResponseUpdate) Mutation() *PromptResponseMutation {
	return pru.mutation
}

// ClearFeedback clears the "feedback" edge to the Feedback entity.
func (pru *PromptResponseUpdate) ClearFeedback() *PromptResponseUpdate {
	pru.mutation.ClearFeedback()
	return pru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *PromptResponseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pru.sqlSave, pru.mutation, pru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pru *PromptResponseUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *PromptResponseUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *PromptResponseUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pru *PromptResponseUpdate) check() error {
	if v, ok := pru.mutation.PromptIndex(); ok {
		if err := promptresponse.PromptIndexValidator(v); err != nil {
			return &ValidationError{Name: "prompt_index", err: fmt.Errorf(`ent: validator failed for field "PromptResponse.prompt_index": %w`, err)}
		}
	}
	return nil
}

func (pru *PromptResponseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(promptresponse.Table, promptresponse.Columns, sqlgraph.NewFieldSpec(promptresponse.FieldID, field.TypeUUID))
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.ParsedTemplate(); ok {
		_spec.SetField(promptresponse.FieldParsedTemplate, field.TypeString, value)
	}
	if value, ok := pru.mutation.PromptIndex(); ok {
		_spec.SetField(promptresponse.FieldPromptIndex, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedPromptIndex(); ok {
		_spec.AddField(promptresponse.FieldPromptIndex, field.TypeInt, value)
	}
	if value, ok := pru.mutation.RangeValue(); ok {
		_spec.SetField(promptresponse.FieldRangeValue, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedRangeValue(); ok {
		_spec.AddField(promptresponse.FieldRangeValue, field.TypeInt, value)
	}
	if pru.mutation.RangeValueCleared() {
		_spec.ClearField(promptresponse.FieldRangeValue, field.TypeInt)
	}
	if value, ok := pru.mutation.BoolValue(); ok {
		_spec.SetField(promptresponse.FieldBoolValue, field.TypeString, value)
	}
	if pru.mutation.BoolValueCleared() {
		_spec.ClearField(promptresponse.FieldBoolValue, field.TypeString)
	}
	if value, ok := pru.mutation.EnumValue(); ok {
		_spec.SetField(promptresponse.FieldEnumValue, field.TypeJSON, value)
	}
	if pru.mutation.EnumValueCleared() {
		_spec.ClearField(promptresponse.FieldEnumValue, field.TypeJSON)
	}
	if value, ok := pru.mutation.LabelValues(); ok {
		_spec.SetField(promptresponse.FieldLabelValues, field.TypeJSON, value)
	}
	if value, ok := pru.mutation.AppendedLabelValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, promptresponse.FieldLabelValues, value)
		})
	}
	if pru.mutation.LabelValuesCleared() {
		_spec.ClearField(promptresponse.FieldLabelValues, field.TypeJSON)
	}
	if value, ok := pru.mutation.FreeformValue(); ok {
		_spec.SetField(promptresponse.FieldFreeformValue, field.TypeString, value)
	}
	if pru.mutation.FreeformValueCleared() {
		_spec.ClearField(promptresponse.FieldFreeformValue, field.TypeString)
	}
	if value, ok := pru.mutation.AnsweredTime(); ok {
		_spec.SetField(promptresponse.FieldAnsweredTime, field.TypeTime, value)
	}
	if pru.mutation.AnsweredTimeCleared() {
		_spec.ClearField(promptresponse.FieldAnsweredTime, field.TypeTime)
	}
	if pru.mutation.FeedbackCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promptresponse.FeedbackTable,
			Columns: []string{promptresponse.FeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedback.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.FeedbackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promptresponse.FeedbackTable,
			Columns: []string{promptresponse.FeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedback.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promptresponse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pru.mutation.done = true
	return n, nil
}

// PromptResponseUpdateOne is the builder for updating a single PromptResponse entity.
type PromptResponseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PromptResponseMutation
}

// SetParsedTemplate sets the "parsed_template" field.
func (pruo *PromptResponseUpdateOne) SetParsedTemplate(s string) *PromptResponseUpdateOne {
	pruo.mutation.SetParsedTemplate(s)
	return pruo
}

// SetNillableParsedTemplate sets the "parsed_template" field if the given value is not nil.
func (pruo *PromptResponseUpdateOne) SetNillableParsedTemplate(s *string) *PromptResponseUpdateOne {
	if s != nil {
		pruo.SetParsedTemplate(*s)
	}
	return pruo
}

// SetPromptIndex sets the "prompt_index" field.
func (pruo *PromptResponseUpdateOne) SetPromptIndex(i int) *PromptResponseUpdateOne {
	pruo.mutation.ResetPromptIndex()
	pruo.mutation.SetPromptIndex(i)
	return pruo
}

// SetNillablePromptIndex sets the "prompt_index" field if the given value is not nil.
func (pruo *PromptResponseUpdateOne) SetNillablePromptIndex(i *int) *PromptResponseUpdateOne {
	if i != nil {
		pruo.SetPromptIndex(*i)
	}
	return pruo
}

// AddPromptIndex adds i to the "prompt_index" field.
func (pruo *PromptResponseUpdateOne) AddPromptIndex(i int) *PromptResponseUpdateOne {
	pruo.mutation.AddPromptIndex(i)
	return pruo
}

// SetRangeValue sets the "range_value" field.
func (pruo *PromptResponseUpdateOne) SetRangeValue(i int) *PromptResponseUpdateOne {
	pruo.mutation.ResetRangeValue()
	pruo.mutation.SetRangeValue(i)
	return pruo
}

// SetNillableRangeValue sets the "range_value" field if the given value is not nil.
func (pruo *PromptResponseUpdateOne) SetNillableRangeValue(i *int) *PromptResponseUpdateOne {
	if i != nil {
		pruo.SetRangeValue(*i)
	}
	return pruo
}

// AddRangeValue adds i to the "range_value" field.
func (pruo *PromptResponseUpdateOne) AddRangeValue(i int) *PromptResponseUpdateOne {
	pruo.mutation.AddRangeValue(i)
	return pruo
}

// ClearRangeValue clears the value of the "range_value" field.
func (pruo *PromptResponseUpdateOne) ClearRangeValue() *PromptResponseUpdateOne {
	pruo.mutation.ClearRangeValue()
	return pruo
}

// SetBoolValue sets the "bool_value" field.
func (pruo *PromptResponseUpdateOne) SetBoolValue(s string) *PromptResponseUpdateOne {
	pruo.mutation.SetBoolValue(s)
	return pruo
}

// SetNillableBoolValue sets the "bool_value" field if the given value is not nil.
func (pruo *PromptResponseUpdateOne) SetNillableBoolValue(s *string) *PromptResponseUpdateOne {
	if s != nil {
		pruo.SetBoolValue(*s)
	}
	return pruo
}

// ClearBoolValue clears the value of the "bool_value" field.
func (pruo *PromptResponseUpdateOne) ClearBoolValue() *PromptResponseUpdateOne {
	pruo.mutation.ClearBoolValue()
	return pruo
}

// SetEnumValue sets the "enum_value" field.
func (pruo *PromptResponseUpdateOne) SetEnumValue(se schema.MeasureEnum) *PromptResponseUpdateOne {
	pruo.mutation.SetEnumValue(se)
	return pruo
}

// SetNillableEnumValue sets the "enum_value" field if the given value is not nil.
func (pruo *PromptResponseUpdateOne) SetNillableEnumValue(se *schema.MeasureEnum) *PromptResponseUpdateOne {
	if se != nil {
		pruo.SetEnumValue(*se)
	}
	return pruo
}

// ClearEnumValue clears the value of the "enum_value" field.
func (pruo *PromptResponseUpdateOne) ClearEnumValue() *PromptResponseUpdateOne {
	pruo.mutation.ClearEnumValue()
	return pruo
}

// SetLabelValues sets the "label_values" field.
func (pruo *PromptResponseUpdateOne) SetLabelValues(s []string) *PromptResponseUpdateOne {
	pruo.mutation.SetLabelValues(s)
	return pruo
}

// AppendLabelValues appends s to the "label_values" field.
func (pruo *PromptResponseUpdateOne) AppendLabelValues(s []string) *PromptResponseUpdateOne {
	pruo.mutation.AppendLabelValues(s)
	return pruo
}

// ClearLabelValues clears the value of the "label_values" field.
func (pruo *PromptResponseUpdateOne) ClearLabelValues() *PromptResponseUpdateOne {
	pruo.mutation.ClearLabelValues()
	return pruo
}

// SetFreeformValue sets the "freeform_value" field.
func (pruo *PromptResponseUpdateOne) SetFreeformValue(s string) *PromptResponseUpdateOne {
	pruo.mutation.SetFreeformValue(s)
	return pruo
}

// SetNillableFreeformValue sets the "freeform_value" field if the given value is not nil.
func (pruo *PromptResponseUpdateOne) SetNillableFreeformValue(s *string) *PromptResponseUpdateOne {
	if s != nil {
		pruo.SetFreeformValue(*s)
	}
	return pruo
}

// ClearFreeformValue clears the value of the "freeform_value" field.
func (pruo *PromptResponseUpdateOne) ClearFreeformValue() *PromptResponseUpdateOne {
	pruo.mutation.ClearFreeformValue()
	return pruo
}

// SetAnsweredTime sets the "answered_time" field.
func (pruo *PromptResponseUpdateOne) SetAnsweredTime(t time.Time) *PromptResponseUpdateOne {
	pruo.mutation.SetAnsweredTime(t)
	return pruo
}

// SetNillableAnsweredTime sets the "answered_time" field if the given value is not nil.
func (pruo *PromptResponseUpdateOne) SetNillableAnsweredTime(t *time.Time) *PromptResponseUpdateOne {
	if t != nil {
		pruo.SetAnsweredTime(*t)
	}
	return pruo
}

// ClearAnsweredTime clears the value of the "answered_time" field.
func (pruo *PromptResponseUpdateOne) ClearAnsweredTime() *PromptResponseUpdateOne {
	pruo.mutation.ClearAnsweredTime()
	return pruo
}

// SetFeedbackID sets the "feedback" edge to the Feedback entity by ID.
func (pruo *PromptResponseUpdateOne) SetFeedbackID(id uuid.UUID) *PromptResponseUpdateOne {
	pruo.mutation.SetFeedbackID(id)
	return pruo
}

// SetNillableFeedbackID sets the "feedback" edge to the Feedback entity by ID if the given value is not nil.
func (pruo *PromptResponseUpdateOne) SetNillableFeedbackID(id *uuid.UUID) *PromptResponseUpdateOne {
	if id != nil {
		pruo = pruo.SetFeedbackID(*id)
	}
	return pruo
}

// SetFeedback sets the "feedback" edge to the Feedback entity.
func (pruo *PromptResponseUpdateOne) SetFeedback(f *Feedback) *PromptResponseUpdateOne {
	return pruo.SetFeedbackID(f.ID)
}

// Mutation returns the PromptResponseMutation object of the builder.
func (pruo *PromptResponseUpdateOne) Mutation() *PromptResponseMutation {
	return pruo.mutation
}

// ClearFeedback clears the "feedback" edge to the Feedback entity.
func (pruo *PromptResponseUpdateOne) ClearFeedback() *PromptResponseUpdateOne {
	pruo.mutation.ClearFeedback()
	return pruo
}

// Where appends a list predicates to the PromptResponseUpdate builder.
func (pruo *PromptResponseUpdateOne) Where(ps ...predicate.PromptResponse) *PromptResponseUpdateOne {
	pruo.mutation.Where(ps...)
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *PromptResponseUpdateOne) Select(field string, fields ...string) *PromptResponseUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated PromptResponse entity.
func (pruo *PromptResponseUpdateOne) Save(ctx context.Context) (*PromptResponse, error) {
	return withHooks(ctx, pruo.sqlSave, pruo.mutation, pruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *PromptResponseUpdateOne) SaveX(ctx context.Context) *PromptResponse {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *PromptResponseUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *PromptResponseUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pruo *PromptResponseUpdateOne) check() error {
	if v, ok := pruo.mutation.PromptIndex(); ok {
		if err := promptresponse.PromptIndexValidator(v); err != nil {
			return &ValidationError{Name: "prompt_index", err: fmt.Errorf(`ent: validator failed for field "PromptResponse.prompt_index": %w`, err)}
		}
	}
	return nil
}

func (pruo *PromptResponseUpdateOne) sqlSave(ctx context.Context) (_node *PromptResponse, err error) {
	if err := pruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(promptresponse.Table, promptresponse.Columns, sqlgraph.NewFieldSpec(promptresponse.FieldID, field.TypeUUID))
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PromptResponse.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promptresponse.FieldID)
		for _, f := range fields {
			if !promptresponse.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != promptresponse.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.ParsedTemplate(); ok {
		_spec.SetField(promptresponse.FieldParsedTemplate, field.TypeString, value)
	}
	if value, ok := pruo.mutation.PromptIndex(); ok {
		_spec.SetField(promptresponse.FieldPromptIndex, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedPromptIndex(); ok {
		_spec.AddField(promptresponse.FieldPromptIndex, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.RangeValue(); ok {
		_spec.SetField(promptresponse.FieldRangeValue, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedRangeValue(); ok {
		_spec.AddField(promptresponse.FieldRangeValue, field.TypeInt, value)
	}
	if pruo.mutation.RangeValueCleared() {
		_spec.ClearField(promptresponse.FieldRangeValue, field.TypeInt)
	}
	if value, ok := pruo.mutation.BoolValue(); ok {
		_spec.SetField(promptresponse.FieldBoolValue, field.TypeString, value)
	}
	if pruo.mutation.BoolValueCleared() {
		_spec.ClearField(promptresponse.FieldBoolValue, field.TypeString)
	}
	if value, ok := pruo.mutation.EnumValue(); ok {
		_spec.SetField(promptresponse.FieldEnumValue, field.TypeJSON, value)
	}
	if pruo.mutation.EnumValueCleared() {
		_spec.ClearField(promptresponse.FieldEnumValue, field.TypeJSON)
	}
	if value, ok := pruo.mutation.LabelValues(); ok {
		_spec.SetField(promptresponse.FieldLabelValues, field.TypeJSON, value)
	}
	if value, ok := pruo.mutation.AppendedLabelValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, promptresponse.FieldLabelValues, value)
		})
	}
	if pruo.mutation.LabelValuesCleared() {
		_spec.ClearField(promptresponse.FieldLabelValues, field.TypeJSON)
	}
	if value, ok := pruo.mutation.FreeformValue(); ok {
		_spec.SetField(promptresponse.FieldFreeformValue, field.TypeString, value)
	}
	if pruo.mutation.FreeformValueCleared() {
		_spec.ClearField(promptresponse.FieldFreeformValue, field.TypeString)
	}
	if value, ok := pruo.mutation.AnsweredTime(); ok {
		_spec.SetField(promptresponse.FieldAnsweredTime, field.TypeTime, value)
	}
	if pruo.mutation.AnsweredTimeCleared() {
		_spec.ClearField(promptresponse.FieldAnsweredTime, field.TypeTime)
	}
	if pruo.mutation.FeedbackCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promptresponse.FeedbackTable,
			Columns: []string{promptresponse.FeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedback.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.FeedbackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promptresponse.FeedbackTable,
			Columns: []string{promptresponse.FeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedback.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PromptResponse{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promptresponse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pruo.mutation.done = true
	return _node, nil
}
