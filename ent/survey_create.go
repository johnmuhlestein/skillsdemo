// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"skillsdemo/ent/prompt"
	"skillsdemo/ent/survey"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SurveyCreate is the builder for creating a Survey entity.
type SurveyCreate struct {
	config
	mutation *SurveyMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (sc *SurveyCreate) SetTitle(s string) *SurveyCreate {
	sc.mutation.SetTitle(s)
	return sc
}

// SetDescription sets the "description" field.
func (sc *SurveyCreate) SetDescription(s string) *SurveyCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetStatus sets the "status" field.
func (sc *SurveyCreate) SetStatus(s survey.Status) *SurveyCreate {
	sc.mutation.SetStatus(s)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *SurveyCreate) SetNillableStatus(s *survey.Status) *SurveyCreate {
	if s != nil {
		sc.SetStatus(*s)
	}
	return sc
}

// SetActiveTime sets the "active_time" field.
func (sc *SurveyCreate) SetActiveTime(t time.Time) *SurveyCreate {
	sc.mutation.SetActiveTime(t)
	return sc
}

// SetArchiveTime sets the "archive_time" field.
func (sc *SurveyCreate) SetArchiveTime(t time.Time) *SurveyCreate {
	sc.mutation.SetArchiveTime(t)
	return sc
}

// SetID sets the "id" field.
func (sc *SurveyCreate) SetID(u uuid.UUID) *SurveyCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SurveyCreate) SetNillableID(u *uuid.UUID) *SurveyCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// AddPromptIDs adds the "prompts" edge to the Prompt entity by IDs.
func (sc *SurveyCreate) AddPromptIDs(ids ...uuid.UUID) *SurveyCreate {
	sc.mutation.AddPromptIDs(ids...)
	return sc
}

// AddPrompts adds the "prompts" edges to the Prompt entity.
func (sc *SurveyCreate) AddPrompts(p ...*Prompt) *SurveyCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sc.AddPromptIDs(ids...)
}

// Mutation returns the SurveyMutation object of the builder.
func (sc *SurveyCreate) Mutation() *SurveyMutation {
	return sc.mutation
}

// Save creates the Survey in the database.
func (sc *SurveyCreate) Save(ctx context.Context) (*Survey, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SurveyCreate) SaveX(ctx context.Context) *Survey {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SurveyCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SurveyCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SurveyCreate) defaults() {
	if _, ok := sc.mutation.Status(); !ok {
		v := survey.DefaultStatus
		sc.mutation.SetStatus(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := survey.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SurveyCreate) check() error {
	if _, ok := sc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Survey.title"`)}
	}
	if _, ok := sc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Survey.description"`)}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Survey.status"`)}
	}
	if v, ok := sc.mutation.Status(); ok {
		if err := survey.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Survey.status": %w`, err)}
		}
	}
	if _, ok := sc.mutation.ActiveTime(); !ok {
		return &ValidationError{Name: "active_time", err: errors.New(`ent: missing required field "Survey.active_time"`)}
	}
	if _, ok := sc.mutation.ArchiveTime(); !ok {
		return &ValidationError{Name: "archive_time", err: errors.New(`ent: missing required field "Survey.archive_time"`)}
	}
	return nil
}

func (sc *SurveyCreate) sqlSave(ctx context.Context) (*Survey, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SurveyCreate) createSpec() (*Survey, *sqlgraph.CreateSpec) {
	var (
		_node = &Survey{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(survey.Table, sqlgraph.NewFieldSpec(survey.FieldID, field.TypeUUID))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.Title(); ok {
		_spec.SetField(survey.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.SetField(survey.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(survey.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := sc.mutation.ActiveTime(); ok {
		_spec.SetField(survey.FieldActiveTime, field.TypeTime, value)
		_node.ActiveTime = value
	}
	if value, ok := sc.mutation.ArchiveTime(); ok {
		_spec.SetField(survey.FieldArchiveTime, field.TypeTime, value)
		_node.ArchiveTime = value
	}
	if nodes := sc.mutation.PromptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.PromptsTable,
			Columns: []string{survey.PromptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SurveyCreateBulk is the builder for creating many Survey entities in bulk.
type SurveyCreateBulk struct {
	config
	err      error
	builders []*SurveyCreate
}

// Save creates the Survey entities in the database.
func (scb *SurveyCreateBulk) Save(ctx context.Context) ([]*Survey, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Survey, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SurveyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SurveyCreateBulk) SaveX(ctx context.Context) []*Survey {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SurveyCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SurveyCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
